{"version":3,"file":"index.js","sources":["../src/generated/models/index.ts","../src/utils/utf8.ts","../src/utils/typeDeserializer.ts","../src/generated/models/mappers.ts","../src/models/storedAttestationPolicy.ts","../src/utils/base64.ts","../src/utils/helpers.ts","../src/models/attestationSigner.ts","../src/models/attestationToken.ts","../src/models/attestationPolicyToken.ts","../src/generated/models/parameters.ts","../src/generated/operations/policy.ts","../src/generated/operations/policyCertificates.ts","../src/generated/operations/attestation.ts","../src/generated/operations/signingCertificates.ts","../src/generated/operations/metadataConfiguration.ts","../src/generated/generatedClientContext.ts","../src/generated/generatedClient.ts","../src/logger.ts","../src/tracing.ts","../src/models/attestationResponse.ts","../src/models/attestationResult.ts","../src/utils/buffer.ts","../src/attestationClient.ts","../src/models/policyResult.ts","../src/attestationAdministrationClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\n/** The response to an attestation policy operation */\nexport interface PolicyResponse {\n  /** An RFC7519 JSON Web Token structure whose body is an PolicyResult object. */\n  token: string;\n}\n\n/** An error response from Attestation. */\nexport interface CloudError {\n  /** An error response from Attestation. */\n  error?: CloudErrorBody;\n}\n\n/** An error response from Attestation. */\nexport interface CloudErrorBody {\n  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */\n  code?: string;\n  /** A message describing the error, intended to be suitable for displaying in a user interface. */\n  message?: string;\n}\n\n/** The response to an attestation policy management API */\nexport interface PolicyCertificatesResponse {\n  /** An RFC7519 JSON Web Token structure containing a PolicyCertificatesResults object which contains the certificates used to validate policy changes */\n  token: string;\n}\n\n/** The response to an attestation policy management API */\nexport interface PolicyCertificatesModifyResponse {\n  /** An RFC7519 JSON Web Token structure whose body is a PolicyCertificatesModificationResult object. */\n  token: string;\n}\n\n/** Attestation request for Intel SGX enclaves */\nexport interface AttestOpenEnclaveRequest {\n  /** OpenEnclave report from the enclave to be attested */\n  report?: Uint8Array;\n  /** Runtime data provided by the enclave at the time of report generation. The MAA will verify that the first 32 bytes of the report_data field of the quote contains the SHA256 hash of the decoded \"data\" field of the runtime data. */\n  runtimeData?: RuntimeData;\n  /** Base64Url encoded \"InitTime data\". The MAA will verify that the init data was known to the enclave. Note that InitTimeData is invalid for CoffeeLake processors. */\n  initTimeData?: InitTimeData;\n  /** Attest against the provided draft policy. Note that the resulting token cannot be validated. */\n  draftPolicyForAttestation?: string;\n}\n\n/** Defines the \"run time data\" provided by the attestation target for use by the MAA */\nexport interface RuntimeData {\n  /** UTF-8 encoded Runtime Data generated by the trusted environment */\n  data?: Uint8Array;\n  /** The type of data contained within the \"data\" field */\n  dataType?: DataType;\n}\n\n/** Defines the \"initialization time data\" used to provision the attestation target for use by the MAA */\nexport interface InitTimeData {\n  /** UTF-8 encoded Initialization Data passed into the trusted environment when it is created. */\n  data?: Uint8Array;\n  /** The type of data contained within the \"data\" field */\n  dataType?: DataType;\n}\n\n/** The result of an attestation operation */\nexport interface AttestationResponse {\n  /** An RFC 7519 JSON Web Token, the body of which is an AttestationResult object. */\n  token: string;\n}\n\n/** Attestation request for Intel SGX enclaves */\nexport interface AttestSgxEnclaveRequest {\n  /** Quote of the enclave to be attested */\n  quote?: Uint8Array;\n  /** Runtime data provided by the enclave at the time of quote generation. The MAA will verify that the first 32 bytes of the report_data field of the quote contains the SHA256 hash of the decoded \"data\" field of the runtime data. */\n  runtimeData?: RuntimeData;\n  /** Initialization data provided when the enclave is created. MAA will verify that the init data was known to the enclave. Note that InitTimeData is invalid for CoffeeLake processors. */\n  initTimeData?: InitTimeData;\n  /** Attest against the provided draft policy. Note that the resulting token cannot be validated. */\n  draftPolicyForAttestation?: string;\n}\n\n/** Attestation request for Trusted Platform Module (TPM) attestation. */\nexport interface TpmAttestationRequest {\n  /** Protocol data containing artifacts for attestation. */\n  data?: Uint8Array;\n}\n\n/** Attestation response for Trusted Platform Module (TPM) attestation. */\nexport interface TpmAttestationResponse {\n  /** Protocol data containing attestation service response. */\n  data?: Uint8Array;\n}\n\nexport interface JsonWebKeySet {\n  /**\n   * The value of the \"keys\" parameter is an array of JWK values.  By\n   * default, the order of the JWK values within the array does not imply\n   * an order of preference among them, although applications of JWK Sets\n   * can choose to assign a meaning to the order for their purposes, if\n   * desired.\n   */\n  keys: JsonWebKey[];\n}\n\nexport interface JsonWebKey {\n  /**\n   * The \"alg\" (algorithm) parameter identifies the algorithm intended for\n   * use with the key.  The values used should either be registered in the\n   * IANA \"JSON Web Signature and Encryption Algorithms\" registry\n   * established by [JWA] or be a value that contains a Collision-\n   * Resistant Name.\n   */\n  alg?: string;\n  /** The \"crv\" (curve) parameter identifies the curve type */\n  crv?: string;\n  /** RSA private exponent or ECC private key */\n  d?: string;\n  /** RSA Private Key Parameter */\n  dp?: string;\n  /** RSA Private Key Parameter */\n  dq?: string;\n  /** RSA public exponent, in Base64 */\n  e?: string;\n  /** Symmetric key */\n  k?: string;\n  /**\n   * The \"kid\" (key ID) parameter is used to match a specific key.  This\n   * is used, for instance, to choose among a set of keys within a JWK Set\n   * during key rollover.  The structure of the \"kid\" value is\n   * unspecified.  When \"kid\" values are used within a JWK Set, different\n   * keys within the JWK Set SHOULD use distinct \"kid\" values.  (One\n   * example in which different keys might use the same \"kid\" value is if\n   * they have different \"kty\" (key type) values but are considered to be\n   * equivalent alternatives by the application using them.)  The \"kid\"\n   * value is a case-sensitive string.\n   */\n  kid?: string;\n  /**\n   * The \"kty\" (key type) parameter identifies the cryptographic algorithm\n   * family used with the key, such as \"RSA\" or \"EC\". \"kty\" values should\n   * either be registered in the IANA \"JSON Web Key Types\" registry\n   * established by [JWA] or be a value that contains a Collision-\n   * Resistant Name.  The \"kty\" value is a case-sensitive string.\n   */\n  kty: string;\n  /** RSA modulus, in Base64 */\n  n?: string;\n  /** RSA secret prime */\n  p?: string;\n  /** RSA secret prime, with p < q */\n  q?: string;\n  /** RSA Private Key Parameter */\n  qi?: string;\n  /**\n   * Use (\"public key use\") identifies the intended use of\n   * the public key. The \"use\" parameter is employed to indicate whether\n   * a public key is used for encrypting data or verifying the signature\n   * on data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).\n   */\n  use?: string;\n  /** X coordinate for the Elliptic Curve point */\n  x?: string;\n  /**\n   * The \"x5c\" (X.509 certificate chain) parameter contains a chain of one\n   * or more PKIX certificates [RFC5280].  The certificate chain is\n   * represented as a JSON array of certificate value strings.  Each\n   * string in the array is a base64-encoded (Section 4 of [RFC4648] --\n   * not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.\n   * The PKIX certificate containing the key value MUST be the first\n   * certificate.\n   */\n  x5C?: string[];\n  /** Y coordinate for the Elliptic Curve point */\n  y?: string;\n}\n\n/** The body of the JWT used for the PolicyCertificates APIs */\nexport interface AttestationCertificateManagementBody {\n  /** RFC 7517 Json Web Key describing the certificate. */\n  policyCertificate?: JsonWebKey;\n}\n\n/** The result of a call to retrieve policy certificates. */\nexport interface PolicyCertificatesResult {\n  /** SHA256 Hash of the binary representation certificate which was added or removed */\n  policyCertificates: JsonWebKeySet;\n}\n\n/** The result of a policy certificate modification */\nexport interface PolicyCertificatesModificationResult {\n  /** Hex encoded SHA1 Hash of the binary representation certificate which was added or removed */\n  certificateThumbprint: string;\n  /** The result of the operation */\n  certificateResolution: CertificateModification;\n}\n\nexport interface StoredAttestationPolicy {\n  /** Policy text to set as a sequence of UTF-8 encoded octets. */\n  attestationPolicy?: Uint8Array;\n}\n\n/** The result of a policy certificate modification */\nexport interface PolicyResult {\n  /** The result of the operation */\n  policyResolution: PolicyModification;\n  /** The SHA256 hash of the policy object modified */\n  policyTokenHash: Uint8Array;\n  /** The certificate used to sign the policy object, if specified */\n  policySigner?: JsonWebKey;\n  /** A JSON Web Token containing a StoredAttestationPolicy object with the attestation policy */\n  policy?: string;\n}\n\n/** A Microsoft Azure Attestation response token body - the body of a response token issued by MAA */\nexport interface GeneratedAttestationResult {\n  /** Unique Identifier for the token */\n  jti: string;\n  /** The Principal who issued the token */\n  iss: string;\n  /** The time at which the token was issued, in the number of seconds since 1970-01-0T00:00:00Z UTC */\n  iat?: number;\n  /** The expiration time after which the token is no longer valid, in the number of seconds since 1970-01-0T00:00:00Z UTC */\n  exp?: number;\n  /** The not before time before which the token cannot be considered valid, in the number of seconds since 1970-01-0T00:00:00Z UTC */\n  nbf?: number;\n  /** An RFC 7800 Proof of Possession Key */\n  cnf?: Record<string, unknown>;\n  /** The Nonce input to the attestation request, if provided. */\n  nonce?: string;\n  /** The Schema version of this structure. Current Value: 1.0 */\n  version: string;\n  /** Runtime Claims */\n  runtimeClaims?: Record<string, unknown>;\n  /** Inittime Claims */\n  inittimeClaims?: Record<string, unknown>;\n  /** Policy Generated Claims */\n  policyClaims?: Record<string, unknown>;\n  /** The Attestation type being attested. */\n  verifierType: string;\n  /** The certificate used to sign the policy object, if specified. */\n  policySigner?: JsonWebKey;\n  /** The SHA256 hash of the BASE64URL encoded policy text used for attestation */\n  policyHash: Uint8Array;\n  /** True if the enclave is debuggable, false otherwise */\n  isDebuggable: boolean;\n  /** The SGX Product ID for the enclave. */\n  productId: number;\n  /** The HEX encoded SGX MRENCLAVE value for the enclave. */\n  mrEnclave: string;\n  /** The HEX encoded SGX MRSIGNER value for the enclave. */\n  mrSigner: string;\n  /** The SGX SVN value for the enclave. */\n  svn: number;\n  /** A copy of the RuntimeData specified as an input to the attest call. */\n  enclaveHeldData?: Uint8Array;\n  /** The SGX SVN value for the enclave. */\n  sgxCollateral?: Record<string, unknown>;\n  /** DEPRECATED: Private Preview version of x-ms-ver claim. */\n  deprecatedVersion?: string;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-is-debuggable claim. */\n  deprecatedIsDebuggable?: boolean;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-collateral claim. */\n  deprecatedSgxCollateral?: Record<string, unknown>;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-ehd claim. */\n  deprecatedEnclaveHeldData?: Uint8Array;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-ehd claim. */\n  deprecatedEnclaveHeldData2?: Uint8Array;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-product-id */\n  deprecatedProductId?: number;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-mrenclave. */\n  deprecatedMrEnclave?: string;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-mrsigner. */\n  deprecatedMrSigner?: string;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-svn. */\n  deprecatedSvn?: number;\n  /** DEPRECATED: Private Preview version of x-ms-tee. */\n  deprecatedTee?: string;\n  /** DEPRECATED: Private Preview version of x-ms-policy-signer */\n  deprecatedPolicySigner?: JsonWebKey;\n  /** DEPRECATED: Private Preview version of x-ms-policy-hash */\n  deprecatedPolicyHash?: Uint8Array;\n  /** DEPRECATED: Private Preview version of nonce */\n  deprecatedRpData?: string;\n}\n\n/** Known values of {@link AttestationType} that the service accepts. */\nexport enum KnownAttestationType {\n  /** Intel Software Guard eXtensions */\n  SgxEnclave = \"SgxEnclave\",\n  /** OpenEnclave extensions to SGX */\n  OpenEnclave = \"OpenEnclave\",\n  /** Edge TPM Virtualization Based Security */\n  Tpm = \"Tpm\"\n}\n\n/**\n * Defines values for AttestationType. \\\n * {@link KnownAttestationType} can be used interchangeably with AttestationType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **SgxEnclave**: Intel Software Guard eXtensions \\\n * **OpenEnclave**: OpenEnclave extensions to SGX \\\n * **Tpm**: Edge TPM Virtualization Based Security\n */\nexport type AttestationType = string;\n\n/** Known values of {@link DataType} that the service accepts. */\nexport enum KnownDataType {\n  /** The contents of the field should be treated as binary and not interpreted by MAA. */\n  Binary = \"Binary\",\n  /** The contents of the field should be treated as a JSON object and may be further interpreted by MAA. */\n  Json = \"JSON\"\n}\n\n/**\n * Defines values for DataType. \\\n * {@link KnownDataType} can be used interchangeably with DataType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Binary**: The contents of the field should be treated as binary and not interpreted by MAA. \\\n * **JSON**: The contents of the field should be treated as a JSON object and may be further interpreted by MAA.\n */\nexport type DataType = string;\n\n/** Known values of {@link CertificateModification} that the service accepts. */\nexport enum KnownCertificateModification {\n  /** After the operation was performed, the certificate is in the set of certificates. */\n  IsPresent = \"IsPresent\",\n  /** After the operation was performed, the certificate is no longer present in the set of certificates. */\n  IsAbsent = \"IsAbsent\"\n}\n\n/**\n * Defines values for CertificateModification. \\\n * {@link KnownCertificateModification} can be used interchangeably with CertificateModification,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **IsPresent**: After the operation was performed, the certificate is in the set of certificates. \\\n * **IsAbsent**: After the operation was performed, the certificate is no longer present in the set of certificates.\n */\nexport type CertificateModification = string;\n\n/** Known values of {@link PolicyModification} that the service accepts. */\nexport enum KnownPolicyModification {\n  /** The specified policy object was updated. */\n  Updated = \"Updated\",\n  /** The specified policy object was removed. */\n  Removed = \"Removed\"\n}\n\n/**\n * Defines values for PolicyModification. \\\n * {@link KnownPolicyModification} can be used interchangeably with PolicyModification,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Updated**: The specified policy object was updated. \\\n * **Removed**: The specified policy object was removed.\n */\nexport type PolicyModification = string;\n\n/** Optional parameters. */\nexport interface PolicyGetOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PolicyGetResponse = PolicyResponse;\n\n/** Optional parameters. */\nexport interface PolicySetModelOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the set operation. */\nexport type PolicySetModelResponse = PolicyResponse;\n\n/** Optional parameters. */\nexport interface PolicyResetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the reset operation. */\nexport type PolicyResetResponse = PolicyResponse;\n\n/** Optional parameters. */\nexport interface PolicyCertificatesGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PolicyCertificatesGetResponse = PolicyCertificatesResponse;\n\n/** Optional parameters. */\nexport interface PolicyCertificatesAddOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the add operation. */\nexport type PolicyCertificatesAddResponse = PolicyCertificatesModifyResponse;\n\n/** Optional parameters. */\nexport interface PolicyCertificatesRemoveOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the remove operation. */\nexport type PolicyCertificatesRemoveResponse = PolicyCertificatesModifyResponse;\n\n/** Optional parameters. */\nexport interface AttestationAttestOpenEnclaveOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the attestOpenEnclave operation. */\nexport type AttestationAttestOpenEnclaveResponse = AttestationResponse;\n\n/** Optional parameters. */\nexport interface AttestationAttestSgxEnclaveOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the attestSgxEnclave operation. */\nexport type AttestationAttestSgxEnclaveResponse = AttestationResponse;\n\n/** Optional parameters. */\nexport interface AttestationAttestTpmOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the attestTpm operation. */\nexport type AttestationAttestTpmResponse = TpmAttestationResponse;\n\n/** Optional parameters. */\nexport interface SigningCertificatesGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type SigningCertificatesGetResponse = JsonWebKeySet;\n\n/** Optional parameters. */\nexport interface MetadataConfigurationGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type MetadataConfigurationGetResponse = Record<string, unknown>;\n\n/** Optional parameters. */\nexport interface GeneratedClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** Api Version */\n  apiVersion?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare let TextDecoder:\n  | undefined\n  | (new () => { decode(buffer: ArrayBuffer | ArrayBufferView): string });\ndeclare let TextEncoder: undefined | (new () => { encode(str: string): ArrayBuffer });\n\n// TextDecoder and TextEncoder are in the global namespace for Node version 11 and\n// higher, but before that, they were in the \"util\" namespace. If we're running\n// under node (\"Buffer\" is defined), then check to see if the global namespace version\n// of the decoders are present, if not, import them from the util namespace.\nconst decoder =\n  typeof Buffer === \"undefined\"\n    ? // eslint-disable-next-line @typescript-eslint/no-require-imports\n      new (TextDecoder ?? require(\"util\").TextDecoder)(\"ascii\")\n    : undefined;\n\nconst encoder =\n  typeof Buffer === \"undefined\"\n    ? // eslint-disable-next-line @typescript-eslint/no-require-imports\n      new (TextEncoder ?? require(\"util\").TextEncoder)(\"ascii\")\n    : undefined;\n\nconst decode: (buffer: ArrayBuffer) => string = decoder\n  ? (buffer) => decoder.decode(buffer)\n  : (buffer) => (buffer as Buffer).toString(\"ascii\");\n\nconst encode: (str: string) => Uint8Array = encoder\n  ? (str) => encoder.encode(str)\n  : (str) => Buffer.from(str, \"utf8\");\n\n/**\n * Converts a string into a utf8 encoded byte array.\n * @param content - The utf8 string to convert.\n * @internal\n */\nexport function stringToBytes(content: string): Uint8Array {\n  return encode(content);\n}\n\n/**\n * Converts a utf8 string into a byte array.\n * @param content - The utf8 string to convert.\n * @internal\n */\nexport function bytesToString(content: Uint8Array): string {\n  return decode(content);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createSerializer, Mapper } from \"@azure/core-client\";\n\n/**\n * The TypeDeserializer class enables easy access to the Attestation Model serialization\n * and deserialization APIs.\n */\nexport class TypeDeserializer {\n  /**\n   * Deserializes a JSON object into a model type.\n   * @param rawJson - The JSON encoded object to convert into model type.\n   * @param bodyMapper - A mapping between type names and {@link Mapper} objects\n   *  which defines the model properties for the type. the {@link bodyTypeName}\n   *  must be one of the properties in the {@link bodyMapper} parameter.\n   * @param bodyTypeName - The name of the type of the body.\n   * @returns The deserialized type. It is the responsibility of the caller to cast to the\n   *      expected return type.\n   *\n   * @internal\n   */\n  public static deserialize(\n    rawJson: unknown,\n    typeMappers: { [key: string]: any },\n    bodyTypeName: string\n  ): unknown {\n    const serializer = createSerializer(typeMappers);\n    return serializer.deserialize(typeMappers[bodyTypeName], rawJson, bodyTypeName);\n  }\n\n  /**\n   * Serializes a JSON object into a model type.\n   * @param objectToSerialize - The JSON encoded object to convert into model type.\n   * @param bodyMapper - A {@link Mapper} object which defines the model properties for the type.\n   * @returns The serialized type as a JSON encoded string.\n   *\n   * @internal\n   */\n  public static serialize(\n    objectToSerialize: unknown,\n    typeMappers: { [key: string]: Mapper },\n    bodyMapper: Mapper\n  ): string {\n    const serializer = createSerializer(typeMappers);\n    return JSON.stringify(serializer.serialize(bodyMapper, objectToSerialize));\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport const PolicyResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyResponse\",\n    modelProperties: {\n      token: {\n        constraints: {\n          Pattern: new RegExp(\n            \"[A-Za-z0-9_-]+\\\\.[A-Za-z0-9_-]*\\\\.[A-Za-z0-9_-]*\"\n          )\n        },\n        serializedName: \"token\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CloudError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CloudError\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"CloudErrorBody\"\n        }\n      }\n    }\n  }\n};\n\nexport const CloudErrorBody: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CloudErrorBody\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyCertificatesResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyCertificatesResponse\",\n    modelProperties: {\n      token: {\n        constraints: {\n          Pattern: new RegExp(\n            \"[A-Za-z0-9_-]+\\\\.[A-Za-z0-9_-]*\\\\.[A-Za-z0-9_-]*\"\n          )\n        },\n        serializedName: \"token\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyCertificatesModifyResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyCertificatesModifyResponse\",\n    modelProperties: {\n      token: {\n        constraints: {\n          Pattern: new RegExp(\n            \"[A-Za-z0-9_-]+\\\\.[A-Za-z0-9_-]*\\\\.[A-Za-z0-9_-]*\"\n          )\n        },\n        serializedName: \"token\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AttestOpenEnclaveRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AttestOpenEnclaveRequest\",\n    modelProperties: {\n      report: {\n        serializedName: \"report\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      runtimeData: {\n        serializedName: \"runtimeData\",\n        type: {\n          name: \"Composite\",\n          className: \"RuntimeData\"\n        }\n      },\n      initTimeData: {\n        serializedName: \"initTimeData\",\n        type: {\n          name: \"Composite\",\n          className: \"InitTimeData\"\n        }\n      },\n      draftPolicyForAttestation: {\n        serializedName: \"draftPolicyForAttestation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RuntimeData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RuntimeData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      dataType: {\n        serializedName: \"dataType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const InitTimeData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"InitTimeData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      dataType: {\n        serializedName: \"dataType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AttestationResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AttestationResponse\",\n    modelProperties: {\n      token: {\n        constraints: {\n          Pattern: new RegExp(\n            \"[A-Za-z0-9_-]+\\\\.[A-Za-z0-9_-]*\\\\.[A-Za-z0-9_-]*\"\n          )\n        },\n        serializedName: \"token\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AttestSgxEnclaveRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AttestSgxEnclaveRequest\",\n    modelProperties: {\n      quote: {\n        serializedName: \"quote\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      runtimeData: {\n        serializedName: \"runtimeData\",\n        type: {\n          name: \"Composite\",\n          className: \"RuntimeData\"\n        }\n      },\n      initTimeData: {\n        serializedName: \"initTimeData\",\n        type: {\n          name: \"Composite\",\n          className: \"InitTimeData\"\n        }\n      },\n      draftPolicyForAttestation: {\n        serializedName: \"draftPolicyForAttestation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TpmAttestationRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TpmAttestationRequest\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const TpmAttestationResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TpmAttestationResponse\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const JsonWebKeySet: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JsonWebKeySet\",\n    modelProperties: {\n      keys: {\n        serializedName: \"keys\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"JsonWebKey\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const JsonWebKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JsonWebKey\",\n    modelProperties: {\n      alg: {\n        serializedName: \"alg\",\n        type: {\n          name: \"String\"\n        }\n      },\n      crv: {\n        serializedName: \"crv\",\n        type: {\n          name: \"String\"\n        }\n      },\n      d: {\n        serializedName: \"d\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dp: {\n        serializedName: \"dp\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dq: {\n        serializedName: \"dq\",\n        type: {\n          name: \"String\"\n        }\n      },\n      e: {\n        serializedName: \"e\",\n        type: {\n          name: \"String\"\n        }\n      },\n      k: {\n        serializedName: \"k\",\n        type: {\n          name: \"String\"\n        }\n      },\n      kid: {\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      kty: {\n        serializedName: \"kty\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      n: {\n        serializedName: \"n\",\n        type: {\n          name: \"String\"\n        }\n      },\n      p: {\n        serializedName: \"p\",\n        type: {\n          name: \"String\"\n        }\n      },\n      q: {\n        serializedName: \"q\",\n        type: {\n          name: \"String\"\n        }\n      },\n      qi: {\n        serializedName: \"qi\",\n        type: {\n          name: \"String\"\n        }\n      },\n      use: {\n        serializedName: \"use\",\n        type: {\n          name: \"String\"\n        }\n      },\n      x: {\n        serializedName: \"x\",\n        type: {\n          name: \"String\"\n        }\n      },\n      x5C: {\n        serializedName: \"x5c\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      y: {\n        serializedName: \"y\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AttestationCertificateManagementBody: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AttestationCertificateManagementBody\",\n    modelProperties: {\n      policyCertificate: {\n        serializedName: \"policyCertificate\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonWebKey\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyCertificatesResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyCertificatesResult\",\n    modelProperties: {\n      policyCertificates: {\n        serializedName: \"x-ms-policy-certificates\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonWebKeySet\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyCertificatesModificationResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyCertificatesModificationResult\",\n    modelProperties: {\n      certificateThumbprint: {\n        serializedName: \"x-ms-certificate-thumbprint\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      certificateResolution: {\n        serializedName: \"x-ms-policycertificates-result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StoredAttestationPolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"StoredAttestationPolicy\",\n    modelProperties: {\n      attestationPolicy: {\n        serializedName: \"AttestationPolicy\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const PolicyResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PolicyResult\",\n    modelProperties: {\n      policyResolution: {\n        serializedName: \"x-ms-policy-result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      policyTokenHash: {\n        serializedName: \"x-ms-policy-token-hash\",\n        required: true,\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      policySigner: {\n        serializedName: \"x-ms-policy-signer\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonWebKey\"\n        }\n      },\n      policy: {\n        constraints: {\n          Pattern: new RegExp(\n            \"[A-Za-z0-9_-]+\\\\.[A-Za-z0-9_-]*\\\\.[A-Za-z0-9_-]*\"\n          )\n        },\n        serializedName: \"x-ms-policy\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedAttestationResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedAttestationResult\",\n    modelProperties: {\n      jti: {\n        serializedName: \"jti\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      iss: {\n        serializedName: \"iss\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      iat: {\n        serializedName: \"iat\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      exp: {\n        serializedName: \"exp\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      nbf: {\n        serializedName: \"nbf\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      cnf: {\n        serializedName: \"cnf\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-ver\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      runtimeClaims: {\n        serializedName: \"x-ms-runtime\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      },\n      inittimeClaims: {\n        serializedName: \"x-ms-inittime\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      },\n      policyClaims: {\n        serializedName: \"x-ms-policy\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      },\n      verifierType: {\n        serializedName: \"x-ms-attestation-type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      policySigner: {\n        serializedName: \"x-ms-policy-signer\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonWebKey\"\n        }\n      },\n      policyHash: {\n        serializedName: \"x-ms-policy-hash\",\n        required: true,\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      isDebuggable: {\n        serializedName: \"x-ms-sgx-is-debuggable\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      productId: {\n        serializedName: \"x-ms-sgx-product-id\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      mrEnclave: {\n        serializedName: \"x-ms-sgx-mrenclave\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      mrSigner: {\n        serializedName: \"x-ms-sgx-mrsigner\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      svn: {\n        serializedName: \"x-ms-sgx-svn\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      enclaveHeldData: {\n        serializedName: \"x-ms-sgx-ehd\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      sgxCollateral: {\n        serializedName: \"x-ms-sgx-collateral\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      },\n      deprecatedVersion: {\n        serializedName: \"ver\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deprecatedIsDebuggable: {\n        serializedName: \"is-debuggable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      deprecatedSgxCollateral: {\n        serializedName: \"maa-attestationcollateral\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      },\n      deprecatedEnclaveHeldData: {\n        serializedName: \"aas-ehd\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      deprecatedEnclaveHeldData2: {\n        serializedName: \"maa-ehd\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      deprecatedProductId: {\n        serializedName: \"product-id\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      deprecatedMrEnclave: {\n        serializedName: \"sgx-mrenclave\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deprecatedMrSigner: {\n        serializedName: \"sgx-mrsigner\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deprecatedSvn: {\n        serializedName: \"svn\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      deprecatedTee: {\n        serializedName: \"tee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deprecatedPolicySigner: {\n        serializedName: \"policy_signer\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonWebKey\"\n        }\n      },\n      deprecatedPolicyHash: {\n        serializedName: \"policy_hash\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      deprecatedRpData: {\n        serializedName: \"rp_data\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n */\n\nimport { stringToBytes } from \"../utils/utf8\";\nimport { TypeDeserializer } from \"../utils/typeDeserializer\";\n\nimport * as Mappers from \"../generated/models/mappers\";\n\n/**\n * Represents a stored attestation policy sent to the attestation service.\n */\nexport class StoredAttestationPolicy {\n  constructor(value: string) {\n    this.attestationPolicy = stringToBytes(value);\n  }\n\n  /**\n   * Serializes a StoredAttestationPolicy object to a JSON encoded string.\n   *\n   * @returns The serialized JSON policy.\n   */\n  serialize(): string {\n    return TypeDeserializer.serialize(\n      this,\n      { StoredAttestationPolicy: Mappers.StoredAttestationPolicy },\n      Mappers.StoredAttestationPolicy\n    );\n  }\n\n  /**\n   * Deserializes a stored attestation policy object returned from the attestation service.\n   *\n   * @param value - Raw JSON object from service to serialize as an attestation policy.\n   * @returns Stored attestation policy.\n   */\n  static deserialize(value: unknown): StoredAttestationPolicy {\n    return TypeDeserializer.deserialize(\n      value,\n      { StoredAttestationPolicy: Mappers.StoredAttestationPolicy },\n      \"StoredAttestationPolicy\"\n    ) as StoredAttestationPolicy;\n  }\n\n  /**\n   * Stored attestation policy, utf8 encoded.\n   */\n  attestationPolicy: Uint8Array;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n */\nexport function encodeString(value: string): string {\n  return Buffer.from(value).toString(\"base64\");\n}\n\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Array to encode\n */\nexport function base64EncodeByteArray(value: Uint8Array): string {\n  // Buffer.from accepts <ArrayBuffer> | <SharedArrayBuffer>-- the TypeScript definition is off here\n  // https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\n  const bufferValue = value instanceof Buffer ? value : Buffer.from(value.buffer as ArrayBuffer);\n  return bufferValue.toString(\"base64\");\n}\n\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Array to encode\n */\nexport function base64UrlEncodeByteArray(value: Uint8Array): string {\n  // Buffer.from accepts <ArrayBuffer> | <SharedArrayBuffer>-- the TypeScript definition is off here\n  // https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\n  const bufferValue = value instanceof Buffer ? value : Buffer.from(value.buffer as ArrayBuffer);\n  const base64 = bufferValue.toString(\"base64\");\n  // Convert the base64 buffer to base64url.\n  return base64\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//, \"_\")\n    .split(\"=\")[0];\n}\n\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n */\nexport function base64DecodeString(value: string): Uint8Array {\n  return Buffer.from(value, \"base64\");\n}\n\n/**\n * Adds missing padding to a Base64 encoded string\n * @param unpadded - The unpadded input string\n * @returns The padded string\n */\nfunction fixPadding(unpadded: string): string {\n  const count = 3 - ((unpadded.length + 3) % 4);\n  return unpadded + \"=\".repeat(count);\n}\n\n/**\n * Decodes a base64url string into a byte array.\n * @param value - the base64url string to decode\n */\nexport function base64UrlDecodeString(value: string): Uint8Array {\n  const encoded = value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const paddedEncoded = fixPadding(encoded);\n  return base64DecodeString(paddedEncoded);\n}\n\nexport function hexToByteArray(value: string): Uint8Array {\n  if (value.length % 2 !== 0) {\n    throw new Error(\"base64FromHex: Input must be a multiple of 2 characters\");\n  }\n  const byteArray = new Array();\n  for (let i = 0; i < value.length; i += 2) {\n    byteArray.push(parseInt(value.substr(i, 2), 16));\n  }\n  return Uint8Array.from(byteArray);\n}\n\nexport function byteArrayToHex(value: Uint8Array): string {\n  return value.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../jsrsasign.d.ts\"/>\nimport * as jsrsasign from \"jsrsasign\";\nimport { base64EncodeByteArray, hexToByteArray } from \"./base64\";\n\n/** Create an AttestationSigningKey from the provided private key and certificate.\n *\n * @param privateKey - PEM encoded DER Encoded RSA or ECDS key.\n * @param certificate - PEM encoded DER encoded X.509 certificate.\n */\nexport function verifyAttestationSigningKey(\n  privateKey: string,\n  certificate: string\n): { certificate: string; privateKey: string } {\n  //\n  // Ensure that the key and certificate are associated with each other.\n  //\n  // Sign a buffer with the key, then verify the signature with the\n  // certificate.\n  const x509 = new jsrsasign.X509();\n  x509.readCertPEM(certificate);\n\n  const alg = x509.getSignatureAlgorithmName();\n\n  const signer = new jsrsasign.KJUR.crypto.Signature({ alg: alg });\n\n  // Confirm that the certificate and private key are related to each other.\n  const bufferToSign = \"1234\";\n\n  signer.init(privateKey);\n  signer.updateString(bufferToSign);\n  const sigVal = signer.sign();\n\n  const verifier = new jsrsasign.KJUR.crypto.Signature({ alg: alg });\n  verifier.init(x509.getPublicKey());\n  verifier.updateString(bufferToSign);\n  if (!verifier.verify(sigVal)) {\n    throw new Error(\"verifyAttestationSigningKey: Key does not match Certificate.\");\n  }\n  return { certificate: certificate, privateKey: privateKey };\n}\n\nexport type PemType = \"CERTIFICATE\" | \"PRIVATE KEY\";\n\n/**\n *\n * @param base64 - Base64 encoded DER object to encode as PEM.\n * @param pemType - PEM object type - typically \"CERTIFICATE\" |\n */\nexport function pemFromBase64(base64: string, pemType: PemType): string {\n  let pem = \"-----BEGIN \" + pemType + \"-----\\n\";\n  while (base64 !== \"\") {\n    pem += base64.substr(0, 64) + \"\\n\";\n    base64 = base64.substr(64);\n  }\n  pem += \"-----END \" + pemType + \"-----\\n\";\n\n  return pem;\n}\n\n/**\n * Converts a hex encoded string to its base64 equivalent.\n * @param value - Hex encoded value\n */\nexport function hexToBase64(value: string): string {\n  return base64EncodeByteArray(hexToByteArray(value));\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { JsonWebKey } from \"../generated/models\";\nimport { pemFromBase64 } from \"../utils/helpers\";\n\n/**\n * An AttestationSigner represents a signing certificate chain/Key ID combination\n * returned by the attestation service.\n */\nexport interface AttestationSigner {\n  /**\n   * The Key ID for the signer, as defined by the \"kid\" parameter in\n   * {@link https://datatracker.ietf.org/doc/html/rfc7517#section-4.5 | RFC 7517 section 4.5}\n   */\n  keyId?: string;\n\n  /**\n   * An array of X.509 certificates DER encoded and PEM encoded one of which\n   * will be used to sign an attestation token. Also the \"x5c\" parameter in\n   * {@link https://datatracker.ietf.org/doc/html/rfc7517#section-4.7 | RFC 7517 section 4.7}\n   */\n  certificates: string[];\n}\n\n/**\n *\n * @param key  - JsonWebKey for signing key.\n * @returns AttestationSigner created from the JsonWebKey.\n *\n * @internal\n */\nexport function _attestationSignerFromGenerated(key?: JsonWebKey): AttestationSigner {\n  return {\n    keyId: key?.kid,\n    certificates: key?.x5C?.map((cert) => pemFromBase64(cert, \"CERTIFICATE\")) ?? []\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../jsrsasign.d.ts\"/>\nimport * as jsrsasign from \"jsrsasign\";\n\nimport { JsonWebKey } from \"../generated/models\";\nimport { base64UrlDecodeString } from \"../utils/base64\";\nimport { bytesToString } from \"../utils/utf8\";\nimport { AttestationSigner, _attestationSignerFromGenerated } from \"./attestationSigner\";\n\nimport * as Mappers from \"../generated/models/mappers\";\nimport { TypeDeserializer } from \"../utils/typeDeserializer\";\nimport { verifyAttestationSigningKey, hexToBase64 } from \"../utils/helpers\";\n\n/**\n * Options used to validate attestation tokens.\n *\n * @typeparam issuer - if provided, specifies the expected issuer of the attestation token.\n * @typeparam validateExpirationTime - if true, validate the expiration time in the token.\n * @typeparam validateNotBeforeTime - if true, validate the \"not before\" time in the token.\n * @typeparam validateToken - if true, validate the token.\n * @typeparam timeValidationSlack - the validation time slack in the time based validations.\n *\n * @remarks\n *\n *  If validateToken, validateNotBeforeTime, or validateExpirationTime are not\n *  provided, they are all assumed to be 'true'.\n *\n */\nexport interface AttestationTokenValidationOptions {\n  /**\n   * If true, validate the attestation token, if false, skip validation.\n   */\n  validateToken?: boolean;\n  /**\n   * If true, validate the expiration time for the token.\n   */\n  validateExpirationTime?: boolean;\n  /**\n   * If true, validate the \"not before\" time for the token.\n   */\n  validateNotBeforeTime?: boolean;\n  /**\n   * If true, validate the issuer of the token.\n   */\n  validateIssuer?: boolean;\n  /**\n   * The expected issuer for the {@link AttestationToken}. Only checked if {@link validateIssuer} is set.\n   */\n  expectedIssuer?: string;\n\n  /**\n   * Tolerance time (in seconds) used to accound for clock drift between the local machine\n   * and the server creating the token.\n   */\n  timeValidationSlack?: number;\n\n  /**\n   * Validation function which allows developers to provide their own validation\n   * functionality for the attestation token. This can be used to perform additional\n   * validations for  signing certificate in AttestationSigner.\n   *\n   * @param token - Attestation Token to validate.\n   * @param signer - Signing Certificate which validated the token.\n   *\n   * @remarks\n   *\n   * If there is a problem with token validation, the validateAttestationCallback function\n   * will return an array of strings indicating the set of problems found in the token.\n   *\n   * @returns an array of problems in the token, or undefined if there are no problems.\n   */\n  validateAttestationToken?: (\n    token: AttestationToken,\n    signer?: AttestationSigner\n  ) => string[] | undefined;\n}\n\n/**\n *\n * An AttestationToken represents an RFC 7515 JSON Web Signature object.\n *\n * It can represent either the token returned by the attestation service,\n * or it can be used to create a token locally which can be used to verify\n * attestation policy changes.\n */\nexport interface AttestationToken {\n  /**\n   * Returns the deserialized body of the AttestationToken object.\n   *\n   * @returns The body of the attestation token as an object.\n   */\n  getBody(): unknown;\n\n  /**\n   * the token to a string.\n   *\n   * @remarks\n   * Serializes the token to a string.\n   *\n   * @returns The token serialized to a RFC 7515 JSON Web Signature.\n   */\n  serialize(): string;\n\n  /**\n   * Validates the attestation token to verify that it is semantically correct.\n   *\n   * @param possibleSigners - the set of possible signers for this attestation token.\n   * @param options - validation options\n   */\n  getTokenProblems(\n    possibleSigners?: AttestationSigner[],\n    options?: AttestationTokenValidationOptions\n  ): string[];\n\n  /** ********* JSON WEB SIGNATURE (RFC 7515) PROPERTIES */\n\n  /**\n   * Returns the algorithm from the header of the JSON Web Signature.\n   *\n   *  See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.1 | RFC 7515 Section 4.1.1})\n   *  for details.\n   *\n   * If the value of algorithm is \"none\" it indicates that the token is unsecured.\n   */\n  algorithm: string;\n\n  /**\n   *  Json Web Signature Header \"kid\".\n   *   See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.4 | RFC 7515 Section 4.1.4})\n   *   for details.\n   */\n  keyId?: string;\n\n  /**\n   * Json Web Signature Header \"crit\".\n   *\n   *   See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.11 | RFC 7515 Section 4.1.11})\n   *   for details.\n   *\n   */\n  critical?: boolean;\n\n  /**\n   * Json Web Token Header \"content type\".\n   * See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.10 | RFC 7515 Section 4.1.10})\n   *\n   */\n  contentType?: string;\n\n  /**\n   * Json Web Token Header \"key URL\".\n   *\n   * @see {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.2 | RFC 7515 Section 4.1.2})\n   *\n   */\n  keyUrl?: string;\n\n  /**\n   * Json Web Token Header \"X509 Url\".\n   * @see {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.5 | RFC 7515 Section 4.1.5})\n   *\n   */\n  x509Url?: string;\n\n  /** Json Web Token Header \"Typ\".\n   *\n   * @see {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.9 | RFC 7515 Section 4.1.9})\n   *\n   */\n  type?: string;\n  /**\n   * Json Web Token Header \"x509 thumprint\".\n   * See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.7 | RFC 7515 Section 4.1.7})\n   */\n  certificateThumbprint?: string;\n\n  /** Json Web Token Header \"x509 SHA256 thumprint\".\n   *\n   * See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.8 | RFC 7515 Section 4.1.8})\n   *\n   */\n  certificateSha256Thumbprint?: string;\n\n  /** Json Web Token Header \"x509 certificate chain\".\n   *\n   * See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.6 | RFC 7515 Section 4.1.6})\n   *\n   */\n  certificateChain?: AttestationSigner;\n\n  /** ********* JSON WEB TOKEN (RFC 7519) PROPERTIES */\n\n  /** Issuer of the attestation token.\n   * See {@link https://www.rfc-editor.org/rfc/rfc7519.html#section-4.1.6 | RFC 7519 Section 4.1.6})\n   *   for details.\n   */\n  issuer?: string;\n\n  /** Expiration time for the token, from JWT body.\n   *\n   * See {@link https://www.rfc-editor.org/rfc/rfc7519.html#section-4.1.4 | RFC 7519 Section 4.1.4})\n   *   for details.\n   */\n  expiresOn?: Date;\n\n  /** Issuance time for the token, from JWT body.\n   *\n   * See {@link https://www.rfc-editor.org/rfc/rfc7519.html#section-4.1.6 | RFC 7519 Section 4.1.6})\n   *   for details.\n   */\n  issuedAt?: Date;\n\n  /**\n   * Not Before time for the token, from JWT body.\n   *\n   * See {@link https://www.rfc-editor.org/rfc/rfc7519.html#section-4.1.5 | RFC 7519 Section 4.1.5})\n   *   for details.\n   */\n  notBefore?: Date;\n}\n\n/**\n *\n * An AttestationToken represents an RFC 7515 JSON Web Signature object.\n *\n * It can represent either the token returned by the attestation service,\n * or it can be used to create a token locally which can be used to verify\n * attestation policy changes.\n */\nexport class AttestationTokenImpl implements AttestationToken {\n  /**\n   * @internal\n   *\n   * @param token - Attetation token returned by the attestation service.\n   */\n  constructor(token: string) {\n    this._token = token;\n\n    const pieces = token.split(\".\");\n    if (pieces.length !== 3) {\n      throw Error(\"Incorrectly formatted token:\");\n    }\n    this._headerBytes = base64UrlDecodeString(pieces[0]);\n    this._header = safeJsonParse(bytesToString(this._headerBytes));\n    this._bodyBytes = base64UrlDecodeString(pieces[1]);\n    this._body = safeJsonParse(bytesToString(this._bodyBytes));\n    //      this._signature = base64UrlDecodeString(pieces[2]);\n\n    this._jwsVerifier = jsrsasign.KJUR.jws.JWS.parse(token);\n  }\n\n  private _token: string;\n  private _headerBytes: Uint8Array;\n  private _header: any;\n  private _bodyBytes: Uint8Array;\n  private _body: any;\n  //    private _signature: Uint8Array;\n\n  private _jwsVerifier: any; // jsrsasign.KJUR.jws.JWS.JWSResult;\n\n  /**\n   * Returns the deserialized body of the AttestationToken object.\n   *\n   * @returns The body of the attestation token as an object.\n   */\n  public getBody(): unknown {\n    return this._jwsVerifier.payloadObj;\n  }\n\n  /**\n   * the token to a string.\n   *\n   * @remarks\n   * Serializes the token to a string.\n   *\n   * @returns The token serialized to a RFC 7515 JSON Web Signature.\n   */\n  public serialize(): string {\n    return this._token;\n  }\n\n  /**\n   * Returns the set of problems discovered in the attestation token.\n   *\n   * @param possibleSigners - the set of possible signers for this attestation token.\n   * @param options - validation options\n   * @returns an array of string values. If there are no problems, returns an empty array.\n   */\n  public getTokenProblems(\n    possibleSigners?: AttestationSigner[],\n    options: AttestationTokenValidationOptions = {\n      validateExpirationTime: true,\n      validateToken: true,\n      validateNotBeforeTime: true\n    }\n  ): string[] {\n    let problems = new Array<string>();\n    if (!options.validateToken) {\n      return problems;\n    }\n\n    let foundSigner: AttestationSigner | undefined = undefined;\n    if (this.algorithm !== \"none\") {\n      const signers = this.getCandidateSigners(possibleSigners);\n\n      signers.some((signer) => {\n        const cert = this.certFromSigner(signer);\n        //          const pubKeyObj = cert.getPublicKey();\n\n        const isValid = jsrsasign.KJUR.jws.JWS.verify(this._token, cert);\n\n        if (isValid) {\n          foundSigner = signer;\n        }\n      });\n\n      if (foundSigner === undefined) {\n        problems.push(\"Attestation Token is not properly signed.\");\n      }\n    }\n\n    // If the token has a body, check the expiration time and issuer.\n    if (this._body !== undefined) {\n      problems = problems.concat(this.validateTimeProperties(options));\n      problems = problems.concat(this.validateIssuer(options));\n    }\n\n    if (options.validateAttestationToken !== undefined) {\n      // If there is a validation error, the getProblemsCallback will return the list of\n      // problems found.\n      const validationErrors = options.validateAttestationToken(this, foundSigner);\n      if (validationErrors) {\n        problems = problems.concat(validationErrors);\n      }\n    }\n    return problems;\n  }\n\n  private validateIssuer(options: AttestationTokenValidationOptions): string[] {\n    const problems = new Array<string>();\n    if (this.issuer && options.validateIssuer) {\n      if (this.issuer !== options.expectedIssuer) {\n        problems.push(\n          \"Found issuer: \" + this.issuer + \"; expected issuer: \" + options.expectedIssuer\n        );\n      }\n    }\n    return problems;\n  }\n  /**\n   * Validate the expiration and notbefore time claims in the JSON web token.\n   *\n   * @param options - Options to be used validating the time properties.\n   */\n  private validateTimeProperties(options: AttestationTokenValidationOptions): string[] {\n    // Calculate the current time as a number of seconds since the start of the\n    // Unix epoch.\n    const problems = new Array<string>();\n    const timeNow = Math.floor(new Date().getTime() / 1000);\n\n    // Validate expiration time.\n    if (this.expiresOn !== undefined && options.validateExpirationTime) {\n      const expTime = this.expiresOn.getTime() / 1000;\n      if (timeNow > expTime) {\n        const delta = timeNow - expTime;\n        if (delta > (options.timeValidationSlack ?? 0)) {\n          problems.push(\"AttestationToken has expired.\");\n        }\n      }\n    }\n\n    // Validate not before time.\n    if (this.notBefore !== undefined && options.validateNotBeforeTime) {\n      const nbfTime = this.notBefore.getTime() / 1000;\n      if (nbfTime > timeNow) {\n        const delta = nbfTime - timeNow;\n        if (delta > (options.timeValidationSlack ?? 0)) {\n          problems.push(\"AttestationToken is not yet valid.\");\n        }\n      }\n    }\n    return problems;\n  }\n\n  private certFromSigner(signer: AttestationSigner): string {\n    // return the PEM encoded certificate.\n    return signer.certificates[0];\n  }\n\n  private getCandidateSigners(\n    possibleSigningCertificates?: AttestationSigner[]\n  ): AttestationSigner[] {\n    const candidateSigners = new Array<AttestationSigner>();\n\n    const desiredKeyId = this.keyId;\n\n    if (desiredKeyId !== undefined && possibleSigningCertificates !== undefined) {\n      possibleSigningCertificates.forEach((possibleSigner) => {\n        if (possibleSigner.keyId === desiredKeyId) {\n          candidateSigners.push(possibleSigner);\n        }\n      });\n\n      // If we didn't find any candidate signers looking through the provided\n      // signing certificates, then maybe there's a certificate chain in the\n      // token itself that might be used to sign the token.\n      if (candidateSigners.length === 0) {\n        if (this.certificateChain !== undefined && this.certificateChain !== null) {\n          candidateSigners.push(this.certificateChain);\n        }\n      }\n    } else {\n      possibleSigningCertificates?.map((value) => candidateSigners.push(value));\n      if (this.certificateChain !== undefined) {\n        candidateSigners.push(this.certificateChain);\n      }\n    }\n    return candidateSigners;\n  }\n\n  /** ********* JSON WEB SIGNATURE (RFC 7515) PROPERTIES */\n\n  /**\n   * Returns the algorithm from the header of the JSON Web Signature.\n   *\n   *  See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.1 | RFC 7515 Section 4.1.1})\n   *  for details.\n   *\n   * If the value of algorithm is \"none\" it indicates that the token is unsecured.\n   */\n  public get algorithm(): string {\n    return this._header?.alg;\n  }\n\n  /**\n   *  Json Web Signature Header \"kid\".\n   *   See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.4 | RFC 7515 Section 4.1.4})\n   *   for details.\n   */\n  public get keyId(): string | undefined {\n    return this._header.kid;\n  }\n\n  /**\n   * Json Web Signature Header \"crit\".\n   *\n   *   See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.11 | RFC 7515 Section 4.1.11})\n   *   for details.\n   *\n   */\n  public get critical(): boolean | undefined {\n    return this._header.crit;\n  }\n\n  /**\n   * Json Web Token Header \"content type\".\n   * See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.10 | RFC 7515 Section 4.1.10})\n   *\n   */\n  public get contentType(): string | undefined {\n    return this._header.cty;\n  }\n\n  /**\n   * Json Web Token Header \"key URL\".\n   *\n   * @see {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.2 | RFC 7515 Section 4.1.2})\n   *\n   */\n  public get keyUrl(): string | undefined {\n    return this._header.jku;\n  }\n\n  /**\n   * Json Web Token Header \"X509 Url\".\n   * @see {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.5 | RFC 7515 Section 4.1.5})\n   *\n   */\n  public get x509Url(): string | undefined {\n    return this._header.x5u;\n  }\n\n  /** Json Web Token Header \"Typ\".\n   *\n   * @see {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.9 | RFC 7515 Section 4.1.9})\n   *\n   */\n  public get type(): string | undefined {\n    return this._header.typ;\n  }\n\n  /**\n   * Json Web Token Header \"x509 thumprint\".\n   * See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.7 | RFC 7515 Section 4.1.7})\n   */\n  public get certificateThumbprint(): string | undefined {\n    return this._header.x5t;\n  }\n\n  /** Json Web Token Header \"x509 SHA256 thumprint\".\n   *\n   * See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.8 | RFC 7515 Section 4.1.8})\n   *\n   */\n  public get certificateSha256Thumbprint(): string | undefined {\n    return this._header[\"x5t#256\"];\n  }\n\n  /** Json Web Token Header \"x509 certificate chain\".\n   *\n   * See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.6 | RFC 7515 Section 4.1.6})\n   *\n   */\n  public get certificateChain(): AttestationSigner | undefined {\n    let jwk: JsonWebKey;\n    if (this._header.jwk !== undefined) {\n      jwk = TypeDeserializer.deserialize(\n        this._header.jwk,\n        [Mappers.JsonWebKey],\n        \"JsonWebKey\"\n      ) as JsonWebKey;\n    } else {\n      jwk = TypeDeserializer.deserialize(\n        this._header,\n        { JsonWebKey: Mappers.JsonWebKey },\n        \"JsonWebKey\"\n      ) as JsonWebKey;\n    }\n    return _attestationSignerFromGenerated(jwk);\n  }\n\n  /** ********* JSON WEB TOKEN (RFC 7519) PROPERTIES */\n\n  /** Issuer of the attestation token.\n   * See {@link https://www.rfc-editor.org/rfc/rfc7519.html#section-4.1.6 | RFC 7519 Section 4.1.6})\n   *   for details.\n   */\n  public get issuer(): string | undefined {\n    return this._body.iss;\n  }\n\n  /** Expiration time for the token, from JWT body.\n   *\n   * See {@link https://www.rfc-editor.org/rfc/rfc7519.html#section-4.1.4 | RFC 7519 Section 4.1.4})\n   *   for details.\n   */\n  public get expiresOn(): Date | undefined {\n    return this._body.exp ? new Date(this._body.exp * 1000) : undefined;\n  }\n\n  /** Issuance time for the token, from JWT body.\n   *\n   * See {@link https://www.rfc-editor.org/rfc/rfc7519.html#section-4.1.6 | RFC 7519 Section 4.1.6})\n   *   for details.\n   */\n  public get issuedAt(): Date | undefined {\n    return this._body.iat ? new Date(this._body.iat * 1000) : undefined;\n  }\n\n  /**\n   * Not Before time for the token, from JWT body.\n   *\n   * See {@link https://www.rfc-editor.org/rfc/rfc7519.html#section-4.1.5 | RFC 7519 Section 4.1.5})\n   *   for details.\n   */\n  public get notBefore(): Date | undefined {\n    return this._body.nbf ? new Date(this._body.nbf * 1000) : undefined;\n  }\n\n  /**\n   * Creates a new attestation token from a body and signing key.\n   * @param body - stringified body of the body of the token to be created.\n   * @param signer - Optional signing key used to sign the newly created token.\n   * @returns an {@link AttestationToken | attestation token}\n   */\n  public static create(params: {\n    body?: string;\n    privateKey?: string;\n    certificate?: string;\n  }): AttestationToken {\n    const header: {\n      alg: string;\n      [k: string]: any;\n    } = { alg: \"none\" };\n\n    if ((!params.privateKey && params.certificate) || (params.privateKey && !params.certificate)) {\n      throw new Error(\n        \"If privateKey is specified, certificate must also be provided. If certificate is provided, privateKey must also be provided.\"\n      );\n    }\n\n    if (params.privateKey && params.certificate) {\n      verifyAttestationSigningKey(params.privateKey, params.certificate);\n    }\n\n    if (params.privateKey || params.certificate) {\n      const x5c = new jsrsasign.X509();\n      x5c.readCertPEM(params.certificate);\n      const pubKey = x5c.getPublicKey();\n      if (pubKey instanceof jsrsasign.RSAKey) {\n        header.alg = \"RS256\";\n      } else if (pubKey instanceof jsrsasign.KJUR.crypto.ECDSA) {\n        header.alg = \"ES256\";\n      } else {\n        throw new Error(\"Unknown public key type: \" + typeof pubKey);\n      }\n      header.x5c = [hexToBase64(x5c.hex)];\n    } else {\n      header.alg = \"none\";\n    }\n\n    const encodedToken = jsrsasign.KJUR.jws.JWS.sign(\n      header.alg,\n      header,\n      params.body ?? \"\",\n      params.privateKey\n    );\n    return new AttestationTokenImpl(encodedToken);\n  }\n}\n\nfunction isObject(thing: any): boolean {\n  return Object.prototype.toString.call(thing) === \"[object Object]\";\n}\n\nfunction safeJsonParse(thing: any): any {\n  if (isObject(thing)) return thing;\n  try {\n    return JSON.parse(thing);\n  } catch (e) {\n    return undefined;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { StoredAttestationPolicy } from \"./storedAttestationPolicy\";\n// import { AttestationSigningKey } from \"./attestationSigningKey\";\nimport { AttestationToken, AttestationTokenImpl } from \"./attestationToken\";\n\n/**\n *\n * An AttestationPolicyToken represents an AttestationToken which holds an attestation\n * policy document.\n *\n * When the attestation service receives a set policy request, the payload of the\n * set policy token contains a {@link https://datatracker.ietf.org/doc/html/rfc7515 | JSON Web Signature}\n * whose body contains the actual attestation policy document.\n *\n * The AttestationPolicyToken represents this JWS object.\n */\nexport interface AttestationPolicyToken extends AttestationToken {}\n\n/** Constructs an AttestationToken containing an Attestation Policy document.\n *\n * @param policy - Attestation policy to embed in the attestation token.\n * @param privateKey - optional private key used to sign the attestation token.\n * @param certificate - optional certificate used to verify the attestation token.\n *\n * @remarks Note that if the attestation instance is running in `Isolated` mode,\n *  the privateKey and certificate are required. If the attestation instance\n *  is running in `AAD` mode, they are optional.\n *\n * @throws {@link Error} when the key in the certificate provided does not match the private key.\n */\nexport function createAttestationPolicyToken(\n  policy: string,\n  privateKey?: string,\n  certificate?: string\n): AttestationPolicyToken {\n  const token = AttestationTokenImpl.create({\n    body: new StoredAttestationPolicy(policy).serialize(),\n    privateKey: privateKey,\n    certificate: certificate\n  });\n  return token;\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  AttestOpenEnclaveRequest as AttestOpenEnclaveRequestMapper,\n  AttestSgxEnclaveRequest as AttestSgxEnclaveRequestMapper,\n  TpmAttestationRequest as TpmAttestationRequestMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const instanceUrl: OperationURLParameter = {\n  parameterPath: \"instanceUrl\",\n  mapper: {\n    serializedName: \"instanceUrl\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2020-10-01\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const attestationType: OperationURLParameter = {\n  parameterPath: \"attestationType\",\n  mapper: {\n    serializedName: \"attestationType\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"text/plain\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const newAttestationPolicy: OperationParameter = {\n  parameterPath: \"newAttestationPolicy\",\n  mapper: {\n    serializedName: \"newAttestationPolicy\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const accept1: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const policyJws: OperationParameter = {\n  parameterPath: \"policyJws\",\n  mapper: {\n    serializedName: \"policyJws\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType1: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const policyCertificateToAdd: OperationParameter = {\n  parameterPath: \"policyCertificateToAdd\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"[A-Za-z0-9_-]+\\\\.[A-Za-z0-9_-]*\\\\.[A-Za-z0-9_-]*\")\n    },\n    serializedName: \"policyCertificateToAdd\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const policyCertificateToRemove: OperationParameter = {\n  parameterPath: \"policyCertificateToRemove\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"[A-Za-z0-9_-]+\\\\.[A-Za-z0-9_-]*\\\\.[A-Za-z0-9_-]*\")\n    },\n    serializedName: \"policyCertificateToRemove\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const request: OperationParameter = {\n  parameterPath: \"request\",\n  mapper: AttestOpenEnclaveRequestMapper\n};\n\nexport const request1: OperationParameter = {\n  parameterPath: \"request\",\n  mapper: AttestSgxEnclaveRequestMapper\n};\n\nexport const request2: OperationParameter = {\n  parameterPath: \"request\",\n  mapper: TpmAttestationRequestMapper\n};\n\nexport const accept2: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/jwk+json, application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Policy } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClientContext } from \"../generatedClientContext\";\nimport {\n  AttestationType,\n  PolicyGetOptionalParams,\n  PolicyGetResponse,\n  PolicySetModelOptionalParams,\n  PolicySetModelResponse,\n  PolicyResetOptionalParams,\n  PolicyResetResponse\n} from \"../models\";\n\n/** Class representing a Policy. */\nexport class PolicyImpl implements Policy {\n  private readonly client: GeneratedClientContext;\n\n  /**\n   * Initialize a new instance of the class Policy class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the current policy for an attestation type.\n   * @param attestationType Specifies the trusted execution environment to be used to validate the\n   *                        evidence\n   * @param options The options parameters.\n   */\n  get(\n    attestationType: AttestationType,\n    options?: PolicyGetOptionalParams\n  ): Promise<PolicyGetResponse> {\n    return this.client.sendOperationRequest(\n      { attestationType, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Sets the policy for a given attestation type.\n   * @param attestationType Specifies the trusted execution environment to be used to validate the\n   *                        evidence\n   * @param newAttestationPolicy JWT Expressing the new policy whose body is a StoredAttestationPolicy\n   *                             object.\n   * @param options The options parameters.\n   */\n  set(\n    attestationType: AttestationType,\n    newAttestationPolicy: string,\n    options?: PolicySetModelOptionalParams\n  ): Promise<PolicySetModelResponse> {\n    return this.client.sendOperationRequest(\n      { attestationType, newAttestationPolicy, options },\n      setOperationSpec\n    );\n  }\n\n  /**\n   * Resets the attestation policy for the specified tenant and reverts to the default policy.\n   * @param attestationType Specifies the trusted execution environment to be used to validate the\n   *                        evidence\n   * @param policyJws JSON Web Signature with an empty policy document\n   * @param options The options parameters.\n   */\n  reset(\n    attestationType: AttestationType,\n    policyJws: string,\n    options?: PolicyResetOptionalParams\n  ): Promise<PolicyResetResponse> {\n    return this.client.sendOperationRequest(\n      { attestationType, policyJws, options },\n      resetOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/policies/{attestationType}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl, Parameters.attestationType],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst setOperationSpec: coreClient.OperationSpec = {\n  path: \"/policies/{attestationType}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.newAttestationPolicy,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl, Parameters.attestationType],\n  headerParameters: [Parameters.contentType, Parameters.accept1],\n  mediaType: \"text\",\n  serializer\n};\nconst resetOperationSpec: coreClient.OperationSpec = {\n  path: \"/policies/{attestationType}:reset\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.policyJws,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl, Parameters.attestationType],\n  headerParameters: [Parameters.contentType, Parameters.accept1],\n  mediaType: \"text\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PolicyCertificates } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClientContext } from \"../generatedClientContext\";\nimport {\n  PolicyCertificatesGetOptionalParams,\n  PolicyCertificatesGetResponse,\n  PolicyCertificatesAddOptionalParams,\n  PolicyCertificatesAddResponse,\n  PolicyCertificatesRemoveOptionalParams,\n  PolicyCertificatesRemoveResponse\n} from \"../models\";\n\n/** Class representing a PolicyCertificates. */\nexport class PolicyCertificatesImpl implements PolicyCertificates {\n  private readonly client: GeneratedClientContext;\n\n  /**\n   * Initialize a new instance of the class PolicyCertificates class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the set of certificates used to express policy for the current tenant.\n   * @param options The options parameters.\n   */\n  get(\n    options?: PolicyCertificatesGetOptionalParams\n  ): Promise<PolicyCertificatesGetResponse> {\n    return this.client.sendOperationRequest({ options }, getOperationSpec);\n  }\n\n  /**\n   * Adds a new attestation policy certificate to the set of policy management certificates.\n   * @param policyCertificateToAdd An RFC7519 JSON Web Token whose body is an RFC7517 JSON Web Key\n   *                               object. The RFC7519 JWT must be signed with one of the existing signing certificates\n   * @param options The options parameters.\n   */\n  add(\n    policyCertificateToAdd: string,\n    options?: PolicyCertificatesAddOptionalParams\n  ): Promise<PolicyCertificatesAddResponse> {\n    return this.client.sendOperationRequest(\n      { policyCertificateToAdd, options },\n      addOperationSpec\n    );\n  }\n\n  /**\n   * Removes the specified policy management certificate. Note that the final policy management\n   * certificate cannot be removed.\n   * @param policyCertificateToRemove An RFC7519 JSON Web Token whose body is an\n   *                                  AttestationCertificateManagementBody object. The RFC7519 JWT must be signed with one of the existing\n   *                                  signing certificates\n   * @param options The options parameters.\n   */\n  remove(\n    policyCertificateToRemove: string,\n    options?: PolicyCertificatesRemoveOptionalParams\n  ): Promise<PolicyCertificatesRemoveResponse> {\n    return this.client.sendOperationRequest(\n      { policyCertificateToRemove, options },\n      removeOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/certificates\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyCertificatesResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst addOperationSpec: coreClient.OperationSpec = {\n  path: \"/certificates:add\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyCertificatesModifyResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.policyCertificateToAdd,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst removeOperationSpec: coreClient.OperationSpec = {\n  path: \"/certificates:remove\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyCertificatesModifyResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.policyCertificateToRemove,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Attestation } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClientContext } from \"../generatedClientContext\";\nimport {\n  AttestOpenEnclaveRequest,\n  AttestationAttestOpenEnclaveOptionalParams,\n  AttestationAttestOpenEnclaveResponse,\n  AttestSgxEnclaveRequest,\n  AttestationAttestSgxEnclaveOptionalParams,\n  AttestationAttestSgxEnclaveResponse,\n  TpmAttestationRequest,\n  AttestationAttestTpmOptionalParams,\n  AttestationAttestTpmResponse\n} from \"../models\";\n\n/** Class representing a Attestation. */\nexport class AttestationImpl implements Attestation {\n  private readonly client: GeneratedClientContext;\n\n  /**\n   * Initialize a new instance of the class Attestation class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Processes an OpenEnclave report , producing an artifact. The type of artifact produced is dependent\n   * upon attestation policy.\n   * @param request Request object containing the quote\n   * @param options The options parameters.\n   */\n  attestOpenEnclave(\n    request: AttestOpenEnclaveRequest,\n    options?: AttestationAttestOpenEnclaveOptionalParams\n  ): Promise<AttestationAttestOpenEnclaveResponse> {\n    return this.client.sendOperationRequest(\n      { request, options },\n      attestOpenEnclaveOperationSpec\n    );\n  }\n\n  /**\n   * Processes an SGX enclave quote, producing an artifact. The type of artifact produced is dependent\n   * upon attestation policy.\n   * @param request Request object containing the quote\n   * @param options The options parameters.\n   */\n  attestSgxEnclave(\n    request: AttestSgxEnclaveRequest,\n    options?: AttestationAttestSgxEnclaveOptionalParams\n  ): Promise<AttestationAttestSgxEnclaveResponse> {\n    return this.client.sendOperationRequest(\n      { request, options },\n      attestSgxEnclaveOperationSpec\n    );\n  }\n\n  /**\n   * Processes attestation evidence from a VBS enclave, producing an attestation result. The attestation\n   * result produced is dependent upon the attestation policy.\n   * @param request Request object\n   * @param options The options parameters.\n   */\n  attestTpm(\n    request: TpmAttestationRequest,\n    options?: AttestationAttestTpmOptionalParams\n  ): Promise<AttestationAttestTpmResponse> {\n    return this.client.sendOperationRequest(\n      { request, options },\n      attestTpmOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst attestOpenEnclaveOperationSpec: coreClient.OperationSpec = {\n  path: \"/attest/OpenEnclave\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AttestationResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.request,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst attestSgxEnclaveOperationSpec: coreClient.OperationSpec = {\n  path: \"/attest/SgxEnclave\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AttestationResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.request1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst attestTpmOperationSpec: coreClient.OperationSpec = {\n  path: \"/attest/Tpm\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TpmAttestationResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.request2,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { SigningCertificates } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClientContext } from \"../generatedClientContext\";\nimport {\n  SigningCertificatesGetOptionalParams,\n  SigningCertificatesGetResponse\n} from \"../models\";\n\n/** Class representing a SigningCertificates. */\nexport class SigningCertificatesImpl implements SigningCertificates {\n  private readonly client: GeneratedClientContext;\n\n  /**\n   * Initialize a new instance of the class SigningCertificates class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves metadata signing certificates in use by the attestation service\n   * @param options The options parameters.\n   */\n  get(\n    options?: SigningCertificatesGetOptionalParams\n  ): Promise<SigningCertificatesGetResponse> {\n    return this.client.sendOperationRequest({ options }, getOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/certs\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.JsonWebKeySet\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { MetadataConfiguration } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClientContext } from \"../generatedClientContext\";\nimport {\n  MetadataConfigurationGetOptionalParams,\n  MetadataConfigurationGetResponse\n} from \"../models\";\n\n/** Class representing a MetadataConfiguration. */\nexport class MetadataConfigurationImpl implements MetadataConfiguration {\n  private readonly client: GeneratedClientContext;\n\n  /**\n   * Initialize a new instance of the class MetadataConfiguration class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves metadata about the attestation signing keys in use by the attestation service\n   * @param options The options parameters.\n   */\n  get(\n    options?: MetadataConfigurationGetOptionalParams\n  ): Promise<MetadataConfigurationGetResponse> {\n    return this.client.sendOperationRequest({ options }, getOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/.well-known/openid-configuration\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport { GeneratedClientOptionalParams } from \"./models\";\n\nexport class GeneratedClientContext extends coreClient.ServiceClient {\n  instanceUrl: string;\n  apiVersion: string;\n\n  /**\n   * Initializes a new instance of the GeneratedClientContext class.\n   * @param instanceUrl The attestation instance base URI, for example https://mytenant.attest.azure.net.\n   * @param options The parameter options\n   */\n  constructor(instanceUrl: string, options?: GeneratedClientOptionalParams) {\n    if (instanceUrl === undefined) {\n      throw new Error(\"'instanceUrl' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: GeneratedClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-attestation/1.0.0`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      baseUri: options.endpoint || \"{instanceUrl}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.instanceUrl = instanceUrl;\n\n    // Assigning values to Constant parameters\n    this.apiVersion = options.apiVersion || \"2020-10-01\";\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  PolicyImpl,\n  PolicyCertificatesImpl,\n  AttestationImpl,\n  SigningCertificatesImpl,\n  MetadataConfigurationImpl\n} from \"./operations\";\nimport {\n  Policy,\n  PolicyCertificates,\n  Attestation,\n  SigningCertificates,\n  MetadataConfiguration\n} from \"./operationsInterfaces\";\nimport { GeneratedClientContext } from \"./generatedClientContext\";\nimport { GeneratedClientOptionalParams } from \"./models\";\n\nexport class GeneratedClient extends GeneratedClientContext {\n  /**\n   * Initializes a new instance of the GeneratedClient class.\n   * @param instanceUrl The attestation instance base URI, for example https://mytenant.attest.azure.net.\n   * @param options The parameter options\n   */\n  constructor(instanceUrl: string, options?: GeneratedClientOptionalParams) {\n    super(instanceUrl, options);\n    this.policy = new PolicyImpl(this);\n    this.policyCertificates = new PolicyCertificatesImpl(this);\n    this.attestation = new AttestationImpl(this);\n    this.signingCertificates = new SigningCertificatesImpl(this);\n    this.metadataConfiguration = new MetadataConfigurationImpl(this);\n  }\n\n  policy: Policy;\n  policyCertificates: PolicyCertificates;\n  attestation: Attestation;\n  signingCertificates: SigningCertificates;\n  metadataConfiguration: MetadataConfiguration;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The \\@azure/logger configuration for this package.\n *\n * @internal\n */\nexport const logger = createClientLogger(\"attestation\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n//\nimport { createSpanFunction } from \"@azure/core-tracing\";\n\n/**\n * Creates a span using the global tracer.\n *\n * @param name - The name of the operation being performed.\n * @param tracingOptions - The options for the underlying http request.\n *\n * @internal\n */\nexport const createSpan = createSpanFunction({\n  namespace: \"Azure.Security.Attestation\",\n  packagePrefix: \"Azure.Security.Attestation\"\n});\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AttestationToken } from \"./attestationToken\";\n\n/**\n * An AttestationResponse represents the response from the Microsoft Azure\n * Attestation service. It has two properties:\n *\n * @param token - The attestation token returned from the attestation service.\n * @param body - The value of the response from the attestation service.\n * @typeparam T - The type of the {@link body} property.\n *\n */\nexport interface AttestationResponse<T> {\n  /**\n   * The Attestation Token returned from the attestation service.\n   */\n  token: AttestationToken;\n\n  /**\n   * The value of the response from the attestation service, derived\n   *  from the body of the {@link token} property.\n   */\n\n  body: T;\n}\n\n/** Create an AttestationResponse object.\n *\n * @param token - Token which was returned from the attestation service.\n * @param value - Value for the response. Usually derived from the body of the token\n *    returned by the service.\n * @returns - A newly created AttestationResponse object.\n */\nexport function createAttestationResponse<T>(\n  token: AttestationToken,\n  value: T\n): AttestationResponse<T> {\n  return { token: token, body: value };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AttestationSigner } from \".\";\nimport { GeneratedAttestationResult } from \"../generated\";\nimport { _attestationSignerFromGenerated } from \"./attestationSigner\";\n\n/**\n * Defines the contents of the {@link AttestationResult.sgxCollateral} claim in\n * an {@link AttestationResult}.\n */\nexport interface AttestationSgxCollateralInfo {\n  /**\n   * Hex encoded Sha256 hash of the Quoting Enclave Certificates.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  qeidcertshash?: string;\n  /**\n   * Hex encoded Sha256 hash of the Quoting Enclave Certificate CRL.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  qeidcrlhash?: string;\n  /**\n   * Hex encoded Sha256 hash of the Quoting Enclave Identity.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  qeidhash?: string;\n  /**\n   * Hex encoded Sha256 hash of the SGX Quote or OpenEnclave Report validated\n   * by this token.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  quotehash?: string;\n  /**\n   * Hex encoded Sha256 hash of the TCB Info Certificates.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  tcbinfocertshash?: string;\n  /**\n   * Hex encoded Sha256 hash of the TCB Info Certificate CRL.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  tcbinfocrlhash?: string;\n  /**\n   * Hex encoded Sha256 hash of the TCB Info for the device being attested.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  tcbinfohash?: string;\n}\n\n/**\n * A Microsoft Azure Attestation response token body - the body of a response token issued by MAA\n */\nexport interface AttestationResult {\n  /**\n   * Unique Identifier for the token.\n   *\n   * Corresponds to the 'jti' claim defined in\n   * {@link https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7 | RFC 7519 section 4.1.7}\n   */\n  uniqueId: string;\n\n  /**\n   * Returns the issuer of the attestation token. MUST be the same as the\n   * endpoint used when constructing the attestation client instance.\n   */\n  issuer: string;\n\n  /**\n   * Returns the \"nonce\" value if one was specified in the Attest request.\n   */\n  nonce?: string;\n\n  /**\n   * The Schema version of this structure. Current Value: 1.0\n   */\n  version: string;\n\n  /**\n   *  Returns the runtime claims in the token.\n   *\n   * This value will match the input `runTimeJson` property to the\n   * {@link AttestationClient.attestSgxEnclave} or\n   * {@link AttestationClient.attestOpenEnclave} API.\n   *\n   * @remarks\n   *\n   * The `runtimeClaims` property will only be populated if the\n   * `runtimeJson` parameter to the `Attest` API is specified. It will\n   * not be populated if the `runtimeData` parameter is specified.\n   */\n  runTimeClaims: unknown;\n  /**\n   * Returns the initialization time claims in the token.\n   * This value will match the input `initTimeJson` property to the\n   * {@link AttestationClient.attestSgxEnclave} or\n   * {@link AttestationClient.attestOpenEnclave} API.\n   *\n   * @remarks\n   *\n   *  The `initTimeClaims` property will only be populated if the `initTimeJson`\n   *  parameter to the `Attest` API is specified. It will not be populated if\n   *  the `initTimeData` parameter is specified.\n   */\n  initTimeClaims: unknown;\n\n  /**\n   * Returns the set of claims generated by the attestation policy on the instance.\n   */\n  policyClaims: unknown;\n\n  /**\n   * Returns the verifier which generated this attestation token. Normally one of:\n   * \"SGX\" or \"TPM\", but others can be specified.\n   */\n  verifierType: string;\n  /**\n   * The certificate used to sign the policy object, if specified.\n   */\n  policySigner?: AttestationSigner;\n  /**\n   * The base64url encoded SHA256 hash of the BASE64URL encoded policy text\n   * used for attestation.\n   */\n  policyHash: Uint8Array;\n  /**\n   * True if the enclave is debuggable, false otherwise. Only valid if `verifierType` is SGX.\n   */\n  isDebuggable?: boolean;\n\n  /**\n   * The SGX Product ID for the enclave. Only valid if the `verifierType` field is \"SGX\"\n   */\n  productId?: number;\n  /**\n   * The HEX encoded SGX MRENCLAVE value for the enclave. Only valid if the\n   * `verifierType` field is \"SGX\"\n   */\n  mrEnclave?: string;\n\n  /**\n   * The HEX encoded SGX MRSIGNER value for the enclave. Only valid if the\n   * `verifierType` field is \"SGX\"\n   */\n  mrSigner?: string;\n\n  /**\n   * The SGX SVN value for the enclave. Only valid if the `verifierType` field is \"SGX\"\n   */\n  svn?: number;\n\n  /**\n   * Returns the value of the runtime_data field specified as an input to the\n   * {@link AttestationClient.attestSgxEnclave} or {@link AttestationClient.attestOpenEnclave} API.\n   *\n   * @remarks\n   *\n   * The `enclaveHeldData` property will only be populated if the\n   * `runtimeData` parameter to the `Attest` API is specified.\n   */\n  enclaveHeldData?: Uint8Array;\n\n  /**\n   * Returns a set of information describing the complete set of inputs to the\n   * Attestation validation logic.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  sgxCollateral?: AttestationSgxCollateralInfo;\n}\n\n/**\n * A Microsoft Azure Attestation response token body - the body of a response token issued by MAA\n */\nexport class AttestationResultImpl implements AttestationResult {\n  /**\n   *\n   * @param params - The parameters for the constructor.\n   *\n   * @hidden\n   */\n  constructor(params: {\n    issuer: string;\n    version: string;\n    nonce?: string;\n    uniqueId: string;\n    runTimeClaims?: unknown;\n    initTimeClaims?: unknown;\n    policyClaims?: unknown;\n    verifierType: string;\n    policySigner?: AttestationSigner;\n    policyHash: Uint8Array;\n    isDebuggable?: boolean;\n    productId?: number;\n    mrEnclave?: string;\n    mrSigner?: string;\n    svn?: number;\n    enclaveHeldData?: Uint8Array;\n    sgxCollateral?: AttestationSgxCollateralInfo;\n  }) {\n    this._issuer = params.issuer;\n    this._nonce = params.nonce;\n    this._version = params.version;\n    this._uniqueId = params.uniqueId;\n    this._runTimeClaims = params.runTimeClaims;\n    this._initTimeClaims = params.initTimeClaims;\n    this._policyClaims = params.policyClaims;\n    this._verifierType = params.verifierType;\n    this._policySigner = params.policySigner;\n    this._policyHash = params.policyHash;\n    this._isDebuggable = params.isDebuggable;\n    this._productId = params.productId;\n    this._mrEnclave = params.mrEnclave;\n    this._mrSigner = params.mrSigner;\n    this._svn = params.svn;\n    this._enclaveHeldData = params.enclaveHeldData;\n    this._sgxCollateral = params.sgxCollateral;\n  }\n\n  private _issuer: string;\n  private _version: string;\n  private _nonce?: string;\n  private _uniqueId: string;\n  private _runTimeClaims?: unknown;\n  private _initTimeClaims?: unknown;\n  private _policyClaims?: unknown;\n  private _verifierType: string;\n  private _policySigner?: AttestationSigner;\n  private _policyHash: Uint8Array;\n  private _isDebuggable?: boolean;\n  private _productId?: number;\n  private _mrEnclave?: string;\n  private _mrSigner?: string;\n  private _svn?: number;\n  private _enclaveHeldData?: Uint8Array;\n  private _sgxCollateral?: AttestationSgxCollateralInfo;\n\n  /**\n   * Unique Identifier for the token\n   *\n   */\n  get uniqueId(): string {\n    return this._uniqueId;\n  }\n\n  /**\n   * Returns the issuer of the attestation token. MUST be the same as the\n   * endpoint used when constructing the attestation client instance.\n   */\n  get issuer(): string {\n    return this._issuer;\n  }\n\n  /**\n   * Returns the \"nonce\" value specified in the Attest request.\n   */\n  get nonce(): string | undefined {\n    return this._nonce;\n  }\n\n  /**\n   * The Schema version of this structure. Current Value: 1.0\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Runtime Claims\n   */\n  get runTimeClaims(): unknown {\n    return this._runTimeClaims;\n  }\n  /**\n   * Inittime Claims\n   */\n  get initTimeClaims(): unknown {\n    return this._initTimeClaims;\n  }\n\n  /**\n   * Policy Generated Claims\n   */\n  get policyClaims(): unknown {\n    return this._policyClaims;\n  }\n  /**\n   * The Attestation type being attested.\n   */\n  get verifierType(): string {\n    return this._verifierType;\n  }\n  /**\n   * The certificate used to sign the policy object, if specified.\n   */\n  get policySigner(): AttestationSigner | undefined {\n    return this._policySigner;\n  }\n  /**\n   * The SHA256 hash of the BASE64URL encoded policy text used for attestation\n   */\n  get policyHash(): Uint8Array {\n    return this._policyHash;\n  }\n  /**\n   * True if the enclave is debuggable, false otherwise\n   */\n  get isDebuggable(): boolean | undefined {\n    return this._isDebuggable;\n  }\n  /**\n   * The SGX Product ID for the enclave.\n   */\n  get productId(): number | undefined {\n    return this._productId;\n  }\n  /**\n   * The HEX encoded SGX MRENCLAVE value for the enclave.\n   */\n  get mrEnclave(): string | undefined {\n    return this._mrEnclave;\n  }\n  /**\n   * The HEX encoded SGX MRSIGNER value for the enclave.\n   */\n  get mrSigner(): string | undefined {\n    return this._mrSigner;\n  }\n  /**\n   * The SGX SVN value for the enclave.\n   */\n  get svn(): number | undefined {\n    return this._svn;\n  }\n  /**\n   * A copy of the RuntimeData specified as an input to the attest call.\n   */\n  get enclaveHeldData(): Uint8Array | undefined {\n    return this._enclaveHeldData;\n  }\n  /**\n   * The SGX SVN value for the enclave.\n   */\n  get sgxCollateral(): AttestationSgxCollateralInfo | undefined {\n    return this._sgxCollateral;\n  }\n}\n\n/**\n *\n * @param generated - Generated attestation result object.\n * @returns newly created AttestationResult from the generated result.\n *\n * @internal\n */\nexport function _attestationResultFromGenerated(\n  generated: GeneratedAttestationResult\n): AttestationResultImpl {\n  return new AttestationResultImpl({\n    issuer: generated.iss,\n    version: generated.version,\n    nonce: generated.nonce,\n    uniqueId: generated.jti,\n    policySigner: generated.policySigner\n      ? _attestationSignerFromGenerated(generated.policySigner)\n      : undefined,\n    runTimeClaims: generated.runtimeClaims,\n    initTimeClaims: generated.inittimeClaims,\n    policyClaims: generated.policyClaims,\n    verifierType: generated.verifierType,\n    policyHash: generated.policyHash,\n    isDebuggable: generated.isDebuggable,\n    productId: generated.productId,\n    mrEnclave: generated.mrEnclave,\n    mrSigner: generated.mrSigner,\n    svn: generated.svn,\n    enclaveHeldData: generated.enclaveHeldData,\n    sgxCollateral: generated.sgxCollateral\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Converts an attestation input from Uint8Array/Buffer/Blob to Uint8Array.\n *\n * @param input - Input to attestation API.\n * @returns Promise which completes with the input data as a Uint8Array.\n */\nexport async function Uint8ArrayFromInput(\n  input: Uint8Array | Buffer | Blob | undefined\n): Promise<Uint8Array | undefined> {\n  if (input === undefined) {\n    return input;\n  }\n\n  if ((input as any).byteLength === undefined) {\n    throw TypeError(\"Blob is unsupported in node.\");\n  }\n\n  // We've eliminated the 'Blob' case above, so we know this must be either a Buffer or Uint8Array.\n  return input as Uint8Array;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { GeneratedClient } from \"./generated/generatedClient\";\n\nimport { AttestationSigner, AttestationTokenValidationOptions, AttestationResult } from \"./models\";\n\nimport {\n  GeneratedAttestationResult,\n  InitTimeData,\n  KnownDataType,\n  RuntimeData\n} from \"./generated/models\";\n\nimport { logger } from \"./logger\";\nimport { createSpan } from \"./tracing\";\nimport { GeneratedClientOptionalParams } from \"./generated/models\";\nimport * as Mappers from \"./generated/models/mappers\";\n\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { AttestationResponse, createAttestationResponse } from \"./models/attestationResponse\";\n\nimport { TypeDeserializer } from \"./utils/typeDeserializer\";\nimport { isTokenCredential, TokenCredential } from \"@azure/core-auth\";\nimport { CommonClientOptions, OperationOptions } from \"@azure/core-client\";\nimport { bytesToString, stringToBytes } from \"./utils/utf8\";\nimport { _attestationResultFromGenerated } from \"./models/attestationResult\";\nimport { _attestationSignerFromGenerated } from \"./models/attestationSigner\";\nimport { AttestationTokenImpl } from \"./models/attestationToken\";\nimport { Uint8ArrayFromInput } from \"./utils/buffer\";\n/**\n * Attestation Client Construction Options.\n */\nexport interface AttestationClientOptions extends CommonClientOptions {\n  /**\n   * Validation options to be used to validate attestation tokens received\n   * from the attestation service.\n   */\n  validationOptions?: AttestationTokenValidationOptions;\n}\n\n/**\n * Operation options for the Attestation Client operations.\n */\nexport interface AttestationClientOperationOptions extends OperationOptions {\n  /**\n   * Validation options to be used to validate attestation tokens received\n   * from the attestation service for the individual operation.\n   */\n  validationOptions?: AttestationTokenValidationOptions;\n}\n\n/**\n * Optional parameters for the AttestOpenEnclave API.\n *\n * @param initTimeData - data provided at the time the enclave was initialized.\n * @param runTimeData - data provided at the time the SGX quote being attested was created.\n * @param draftPolicyForAttestation - If specified, the attestation policy to be used during the attestation request.\n */\nexport interface AttestOpenEnclaveOptions extends AttestationClientOperationOptions {\n  /**\n   *initTimeData : data provided at the time the enclave was initialized, to be interpreted as binary data.\n   *\n   */\n  initTimeData?: Uint8Array | Buffer | Blob;\n\n  /**\n   * inittimeJson : data provided at the time the enclave was initialized, to be interpreted as JSON data.\n   */\n  initTimeJson?: Uint8Array | Buffer | Blob;\n\n  /**\n   * runTimeData  - data provided at the time the OpenEnclave report being attested was created to be interpreted as binary data.\n   */\n  runTimeData?: Uint8Array | Buffer | Blob;\n\n  /**\n   * runTimeJson  - data provided at the time the OpenEnclave report being attested was created to be interpreted as JSON data.\n   */\n  runTimeJson?: Uint8Array | Buffer | Blob;\n\n  /**\n   * draftPolicyForAttestation - If specified, the attestation policy to be used during the attestation request.\n   */\n  draftPolicyForAttestation?: string;\n}\n\n/**\n * Optional parameters for the AttestSgxEnclave API.\n *\n * @param initTimeData - data provided at the time the enclave was initialized.\n * @param runTimeData - data provided at the time the SGX quote being attested was created.\n * @param draftPolicyForAttestation - If specified, the attestation policy to be used during the attestation request.\n */\nexport interface AttestSgxEnclaveOptions extends AttestationClientOperationOptions {\n  /**\n   *initTimeData : data provided at the time the enclave was initialized, to be interpreted as binary data.\n   *\n   */\n  initTimeData?: Uint8Array | Buffer | Blob;\n\n  /**\n   * inittimeJson : data provided at the time the enclave was initialized, to be interpreted as JSON data.\n   */\n  initTimeJson?: Uint8Array | Buffer | Blob;\n\n  /**\n   * runTimeData  - data provided at the time the OpenEnclave report being attested was created to be interpreted as binary data.\n   */\n  runTimeData?: Uint8Array | Buffer | Blob;\n\n  /**\n   * runTimeJson  - data provided at the time the OpenEnclave report being attested was created to be interpreted as JSON data.\n   */\n  runTimeJson?: Uint8Array | Buffer | Blob;\n\n  /**\n   * draftPolicyForAttestation - If specified, the attestation policy to be used during the attestation request.\n   */\n  draftPolicyForAttestation?: string;\n}\n\n/**\n * Operation options for the AttestTpm API.\n */\nexport interface AttestTpmOptions extends AttestationClientOperationOptions {}\n\n/**\n * Attestation Client class.\n *\n * The AttestationClient class enables access to the Attestation related APIs:\n *\n * - getOpenIdMetadata\n * - getAttestationSigners\n * - attestSgxEnclave\n * - attestOpenEnclave\n * - attestTpm\n */\nexport class AttestationClient {\n  /**\n   * Creates an instance of AttestationClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { AttestationClient } from \"@azure/attestation\";\n   *\n   * const client = new AttestationClient(\n   *    \"<service endpoint>\"\n   * );\n   * ```\n   *\n   * @param endpoint - The attestation instance base URI, for example https://mytenant.attest.azure.net.\n   * @param options - Options used to configure the Attestation Client.\n   *\n   */\n  public constructor(endpoint: string, options?: AttestationClientOptions);\n\n  /**\n   * Creates an instance of AttestationClient with options and credentials.\n   *\n   * Example usage:\n   * ```ts\n   * import { AttestationClient } from \"@azure/attestation\";\n   *\n   * const client = new AttestationClient(\n   *    \"<service endpoint>\",\n   *    new TokenCredential(\"<>\"),\n   *    { tokenValidationOptions: { validateToken: false } }\n   * );\n   * ```\n   *\n   * Note that credentials are required to call the `attestTpm` API.\n   *\n   * @param endpoint - The attestation instance base URI, for example https://mytenant.attest.azure.net.\n   * @param credentials - Credentials used to configure the attestation client.\n   *\n   */\n  public constructor(\n    endpoint: string,\n    credentials: TokenCredential,\n    options?: AttestationClientOptions\n  );\n  public constructor(\n    endpoint: string,\n    credentialsOrOptions?: TokenCredential | AttestationClientOptions,\n    clientOptions: AttestationClientOptions = {}\n  ) {\n    let credentialScopes: string[] | undefined = undefined;\n    let credential: TokenCredential | undefined = undefined;\n    let options: AttestationClientOptions = {};\n\n    // If arg2 is defined, it's either a tokenCredential or it's a client options.\n    if (credentialsOrOptions !== undefined) {\n      if (isTokenCredential(credentialsOrOptions)) {\n        credential = credentialsOrOptions;\n        credentialScopes = [\"https://attest.azure.net/.default\"];\n      } else {\n        options = credentialsOrOptions;\n      }\n    } else if (clientOptions !== undefined) {\n      options = clientOptions;\n    }\n\n    const internalPipelineOptions: GeneratedClientOptionalParams = {\n      ...options,\n      ...{\n        credentialScopes: credentialScopes,\n        credential: credential,\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: [\"x-ms-request-id\", \"x-ms-maa-service-version\"]\n        }\n      }\n    };\n\n    this._client = new GeneratedClient(endpoint, internalPipelineOptions);\n    this._validationOptions = options.validationOptions;\n  }\n\n  /** Attests an OpenEnclave report generated from an SGX Enclave using the OpenEnclave SDK.\n   *\n   * @param report - An OpenEnclave report generated by an SGX enclave.\n   * @param options - Operation options for the attestOpenEnclave API call.\n   * @returns Returns an AttestationResponse whose body is an AttestationResult describing\n   *    the claims returned by the attestation service.\n   *\n   * @throws {@link Error} if the `initTimeData` option and `initTimeJson` option is provided.\n   * @throws {@link Error} if the `runTimeData` option and `runTimeJson` option is provided.\n   * @throws {@link Error} if the `initTimeJson` option is provided and the value of `initTimeJson` is not JSON.\n   * @throws {@link Error} if the `runTimeJson` option is provided and the value of `runTimeJson` is not JSON.\n   */\n  public async attestOpenEnclave(\n    report: Uint8Array | Buffer | Blob,\n    options: AttestOpenEnclaveOptions = {}\n  ): Promise<AttestationResponse<AttestationResult>> {\n    const { span, updatedOptions } = createSpan(\"AttestationClient-attestOpenEnclave\", options);\n\n    try {\n      if (options.initTimeData !== undefined && options.initTimeJson !== undefined) {\n        throw new Error(\"Cannot provide both initTimeData and initTimeJson.\");\n      }\n\n      if (options.runTimeData !== undefined && options.runTimeJson !== undefined) {\n        throw new Error(\"Cannot provide both runTimeData and runTimeJson.\");\n      }\n\n      const initData = await Uint8ArrayFromInput(options.initTimeData ?? options.initTimeJson);\n\n      const initTimeData: InitTimeData | undefined = initData\n        ? {\n            data: initData,\n            dataType: options.initTimeJson !== undefined ? KnownDataType.Json : KnownDataType.Binary\n          }\n        : undefined;\n\n      const runData = await Uint8ArrayFromInput(options.runTimeData ?? options.runTimeJson);\n\n      const runTimeData: RuntimeData | undefined = runData\n        ? {\n            data: runData,\n            dataType: options.runTimeJson !== undefined ? KnownDataType.Json : KnownDataType.Binary\n          }\n        : undefined;\n\n      const attestationResponse = await this._client.attestation.attestOpenEnclave(\n        {\n          report: await Uint8ArrayFromInput(report),\n          initTimeData: initTimeData,\n          runtimeData: runTimeData,\n          draftPolicyForAttestation: options.draftPolicyForAttestation ?? undefined\n        },\n        updatedOptions\n      );\n\n      const token = new AttestationTokenImpl(attestationResponse.token);\n      const problems = token.getTokenProblems(\n        await this._signingKeys(),\n        options.validationOptions ?? this._validationOptions\n      );\n      if (problems.length) {\n        throw new Error(problems.join(\";\"));\n      }\n\n      const attestationResult = TypeDeserializer.deserialize(\n        token.getBody(),\n        {\n          GeneratedAttestationResult: Mappers.GeneratedAttestationResult,\n          JsonWebKey: Mappers.JsonWebKey\n        },\n        \"GeneratedAttestationResult\"\n      ) as GeneratedAttestationResult;\n\n      return createAttestationResponse<AttestationResult>(\n        token,\n        _attestationResultFromGenerated(attestationResult)\n      );\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /** Attests a quote generated from SGX Enclave using the Intel SDK.\n   *\n   * @param quote - An SGX quote generated by an SGX enclave.\n   * @param options - Operation options for the attestOpenEnclave API call.\n   * @returns Returns an AttestationResponse whose body is an AttestationResult describing\n   *    the claims returned by the attestation service.\n   * @throws {@link Error} if the `initTimeData` option and `initTimeJson` option is provided.\n   * @throws {@link Error} if the `runTimeData` option and `runTimeJson` option is provided.\n   */\n  public async attestSgxEnclave(\n    quote: Uint8Array | Buffer | Blob,\n    options: AttestSgxEnclaveOptions = {}\n  ): Promise<AttestationResponse<AttestationResult>> {\n    const { span, updatedOptions } = createSpan(\"AttestationClient-attestSgxEnclave\", options);\n    try {\n      if (options.initTimeData !== undefined && options.initTimeJson !== undefined) {\n        throw new Error(\"Cannot provide both initTimeData and initTimeJson.\");\n      }\n\n      if (options.runTimeData !== undefined && options.runTimeJson !== undefined) {\n        throw new Error(\"Cannot provide both runTimeData and runTimeJson.\");\n      }\n\n      const initData = await Uint8ArrayFromInput(options.initTimeData ?? options.initTimeJson);\n\n      const initTimeData: InitTimeData | undefined = initData\n        ? {\n            data: initData,\n            dataType: options.initTimeJson !== undefined ? KnownDataType.Json : KnownDataType.Binary\n          }\n        : undefined;\n\n      const runData = await Uint8ArrayFromInput(options.runTimeData ?? options.runTimeJson);\n      const runTimeData: RuntimeData | undefined = runData\n        ? {\n            data: runData,\n            dataType: options.runTimeJson !== undefined ? KnownDataType.Json : KnownDataType.Binary\n          }\n        : undefined;\n\n      const attestationResponse = await this._client.attestation.attestSgxEnclave(\n        {\n          quote: await Uint8ArrayFromInput(quote),\n          initTimeData: initTimeData,\n          runtimeData: runTimeData,\n          draftPolicyForAttestation: options.draftPolicyForAttestation ?? undefined\n        },\n        updatedOptions\n      );\n\n      const token = new AttestationTokenImpl(attestationResponse.token);\n      const problems = token.getTokenProblems(\n        await this._signingKeys(),\n        options.validationOptions ?? this._validationOptions\n      );\n      if (problems.length) {\n        throw new Error(problems.join(\";\"));\n      }\n\n      const attestationResult = TypeDeserializer.deserialize(\n        token.getBody(),\n        {\n          GeneratedAttestationResult: Mappers.GeneratedAttestationResult,\n          JsonWebKey: Mappers.JsonWebKey\n        },\n        \"GeneratedAttestationResult\"\n      ) as GeneratedAttestationResult;\n\n      return createAttestationResponse<AttestationResult>(\n        token,\n        _attestationResultFromGenerated(attestationResult)\n      );\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /** Attest a TPM based enclave.\n\n   * See the  {@link https://docs.microsoft.com/en-us/azure/attestation/virtualization-based-security-protocol | TPM Attestation Protocol Reference} for more information.\n   * \n   * @param request - Incoming request to send to the TPM attestation service, Utf8 encoded.\n   * @param options - Pipeline options for TPM attestation request.\n   * @returns A structure containing the response from the TPM attestation, Utf8 encoded.\n   * \n   * @remarks\n   * \n   * The incoming requests to the TPM attestation API are stringified JSON objects.\n   * \n   * @example\n   * For example, the initial call for a TPM attestation operation is:\n   * \n   * ```js\n   * const encodedPayload = JSON.stringify({ payload: { type: \"aikcert\" } });\n   * const result = await client.attestTpm(encodedPayload);\n   * ```\n   * \n   * where stringToBytes converts the string to UTF8.\n   * \n   * Note that the attestTpm requires an attestation client which is configured with\n   * authentication credentials.\n   * \n   */\n  public async attestTpm(request: string, options: AttestTpmOptions = {}): Promise<string> {\n    const { span, updatedOptions } = createSpan(\"AttestationClient-attestSgxEnclave\", options);\n    try {\n      const response = await this._client.attestation.attestTpm(\n        { data: stringToBytes(request) },\n        updatedOptions\n      );\n      if (response.data) {\n        return bytesToString(response.data);\n      } else {\n        throw Error(\"Internal error - response data cannot be undefined.\");\n      }\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns the list of attestation signers which can be used to sign attestation\n   * service tokens.\n   *\n   * @param options - Client operation options.\n   * @returns the set of AttestationSigners which may be used to sign attestation tokens.\n   */\n  public async getAttestationSigners(\n    options: AttestationClientOperationOptions = {}\n  ): Promise<AttestationSigner[]> {\n    const { span, updatedOptions } = createSpan(\"AttestationClient-getAttestationSigners\", options);\n    try {\n      const signingCertificates = await this._client.signingCertificates.get(updatedOptions);\n      const signers: AttestationSigner[] = new Array();\n      signingCertificates.keys?.forEach((element) => {\n        signers.push(_attestationSignerFromGenerated(element));\n      });\n      return signers;\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns the OpenID Metadata discovery document for the attestation service instance.\n   * @param options - Client operation options.\n   * @returns The OpenID metadata discovery document for the attestation service.\n   */\n  public async getOpenIdMetadata(\n    options: AttestationClientOperationOptions = {}\n  ): Promise<Record<string, unknown>> {\n    const { span, updatedOptions } = createSpan(\"AttestationClient-getOpenIdMetadata\", options);\n    try {\n      const configs = await this._client.metadataConfiguration.get(updatedOptions);\n      return configs;\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private _client: GeneratedClient;\n  private _validationOptions?: AttestationTokenValidationOptions;\n  private _signers?: AttestationSigner[];\n\n  private async _signingKeys(): Promise<AttestationSigner[]> {\n    if (this._signers !== undefined) {\n      return this._signers;\n    }\n    const jwks = await this._client.signingCertificates.get();\n    const signers: AttestationSigner[] = new Array();\n    jwks.keys?.forEach((element) => {\n      signers.push(_attestationSignerFromGenerated(element));\n    });\n    this._signers = signers;\n    return this._signers;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n */\n\nimport { PolicyModification } from \"./index\";\nimport * as Mappers from \"../generated/models/mappers\";\n\nimport { PolicyResult as GeneratedPolicyResult } from \"../generated/models\";\n\nimport { TypeDeserializer } from \"../utils/typeDeserializer\";\nimport { AttestationSigner, _attestationSignerFromGenerated } from \"./attestationSigner\";\n\n/**\n * The result of a policy certificate modification\n */\nexport interface PolicyResult {\n  /**\n   * The result of the operation\n   */\n  policyResolution: PolicyModification;\n  /**\n   * The SHA256 hash of the policy object modified\n   */\n  policyTokenHash: Uint8Array;\n  /**\n   * The certificate used to sign the policy object, if specified\n   */\n  policySigner?: AttestationSigner;\n  /**\n   * A JSON Web Token containing a StoredAttestationPolicy object with the attestation policy\n   */\n  policy?: string;\n}\n\n/**\n * Create a new instance of a {@link PolicyResult} from a raw JSON object.\n * @param rawJson - JSON Policy Result object returned from the Attestation service.\n * @returns a newly created {@link PolicyResult} object whose contents reflect the JSON received from\n *  the attestation service.\n */\nexport function _policyResultFromGenerated(rawJson: unknown): PolicyResult {\n  const policyResult: GeneratedPolicyResult = TypeDeserializer.deserialize(\n    rawJson,\n    { PolicyResult: Mappers.PolicyResult, JsonWebKey: Mappers.JsonWebKey },\n    \"PolicyResult\"\n  ) as GeneratedPolicyResult;\n  return {\n    policyResolution: policyResult.policyResolution,\n    policyTokenHash: policyResult.policyTokenHash,\n    policy: policyResult.policy,\n    policySigner: policyResult.policySigner\n      ? _attestationSignerFromGenerated(policyResult.policySigner)\n      : undefined\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SpanStatusCode } from \"@azure/core-tracing\";\n\nimport { GeneratedClient } from \"./generated/generatedClient\";\n\nimport { logger } from \"./logger\";\nimport { createSpan } from \"./tracing\";\n\nimport {\n  AttestationCertificateManagementBody,\n  GeneratedClientOptionalParams,\n  JsonWebKey,\n  PolicyCertificatesResult\n} from \"./generated/models\";\n\nimport { bytesToString } from \"./utils/utf8\";\n\nimport {\n  AttestationResponse,\n  AttestationTokenValidationOptions,\n  AttestationType,\n  PolicyResult,\n  AttestationSigner,\n  PolicyCertificatesModificationResult\n} from \"./models\";\nimport { StoredAttestationPolicy } from \"./models/storedAttestationPolicy\";\n\nimport { CommonClientOptions, OperationOptions } from \"@azure/core-client\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { TypeDeserializer } from \"./utils/typeDeserializer\";\nimport * as Mappers from \"./generated/models/mappers\";\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../jsrsasign.d.ts\"/>\nimport * as jsrsasign from \"jsrsasign\";\nimport { hexToBase64 } from \"./utils/helpers\";\nimport { _policyResultFromGenerated } from \"./models/policyResult\";\nimport { _attestationSignerFromGenerated } from \"./models/attestationSigner\";\nimport { verifyAttestationSigningKey } from \"./utils/helpers\";\nimport { createAttestationResponse } from \"./models/attestationResponse\";\nimport { AttestationTokenImpl } from \"./models/attestationToken\";\n\n/**\n * Attestation Client Construction Options.\n */\nexport interface AttestationAdministrationClientOptions extends CommonClientOptions {\n  /**\n   * Options to be used globally to validate attestation tokens received from\n   * the attestation service.\n   */\n  validationOptions?: AttestationTokenValidationOptions;\n}\n\n/**\n * Operation options for the Attestation Administration Client operations.\n */\nexport interface AttestationAdministrationClientOperationOptions extends OperationOptions {\n  /**\n   * Options to be used globally to validate attestation tokens received from\n   * the attestation service.\n   */\n  validationOptions?: AttestationTokenValidationOptions;\n}\n\n/**\n * Operation options for the administration Policy operations.\n */\nexport interface AttestationAdministrationClientPolicyOperationOptions\n  extends AttestationAdministrationClientOperationOptions {\n  /**\n   * Optional Private key used to sign the token sent to the attestation service.\n   *\n   * Required for Isolated Mode attestation instances.\n   */\n  privateKey?: string;\n\n  /**\n   * Optional certificate which can validate the token sent to the attestation service.\n   *\n   * Required for Isolated Mode attestation instances.\n   *\n   * If the service instance is in Isolated mode, the certificate *must* be one\n   * of the configured policy management certificates.\n   */\n  certificate?: string;\n}\n\n/**\n * Operation options for the Policy Certificates operations.\n */\nexport interface AttestationAdministrationClientPolicyCertificateOperationOptions\n  extends AttestationAdministrationClientOperationOptions {}\n\n/**\n * Attestation Client class.\n *\n * The AttestationClient class enables access to the Attestation related APIs:\n *\n * - getPolicy\n * - setPolicy\n * - resetPolicy\n * - getPolicyManagementCertificates\n * - addPolicyManagementCertificate\n * - removePolicyManagementCertificate\n */\nexport class AttestationAdministrationClient {\n  /**\n   * Creates an instance of AttestationAdministrationClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { AttestationAdministrationClient } from \"@azure/attestation\";\n   *\n   * const client = new AttestationAdministrationClient(\n   *    \"<service endpoint>\",\n   *    new TokenCredential(\"<>\")\n   * );\n   * ```\n   *\n   * @param endpoint - The attestation instance endpoint, for example https://mytenant.attest.azure.net.\n   * @param credential - Used to authenticate requests to the service.\n   * @param options - Used to configure the Form Recognizer client.\n   */\n\n  constructor(\n    endpoint: string,\n    credentials: TokenCredential,\n    options: AttestationAdministrationClientOptions = {}\n  ) {\n    this._validationOptions = options.validationOptions;\n\n    const internalPipelineOptions: GeneratedClientOptionalParams = {\n      ...options,\n      ...{\n        credential: credentials,\n        credentialScopes: [\"https://attest.azure.net/.default\"],\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: [\"x-ms-request-id\", \"x-ms-maa-service-version\"]\n        }\n      }\n    };\n\n    this._client = new GeneratedClient(endpoint, internalPipelineOptions);\n  }\n\n  /**\n   * Retrieves the attestation policy document from the server, and returns it\n   * to the caller.\n   *\n   * @param attestationType - AttestationType for which to retrieve policy.\n   * @param options - Pipeline and client options for the `getPolicy` call.\n   * @returns `AttestationResponse<string>` - the `value` property is the\n   *      attestation policy,  the `token` property will be the actual token\n   *      returned by the attestation service.\n   */\n  public async getPolicy(\n    attestationType: AttestationType,\n    options: AttestationAdministrationClientPolicyOperationOptions = {}\n  ): Promise<AttestationResponse<string>> {\n    const { span, updatedOptions } = createSpan(\n      \"AttestationAdministrationClient-getPolicy\",\n      options\n    );\n    try {\n      const getPolicyResult = await this._client.policy.get(attestationType, updatedOptions);\n\n      // The attestation token returned from the service has a PolicyResult\n      // object as the body.\n      const token = new AttestationTokenImpl(getPolicyResult.token);\n\n      // Validate the token returned from the service.\n      const problems = token.getTokenProblems(\n        await this.signingKeys(),\n        options.validationOptions ?? this._validationOptions\n      );\n      if (problems.length) {\n        throw new Error(problems.join(\";\"));\n      }\n\n      // Deserialize the PolicyResult object to retrieve the underlying policy\n      //  token\n      const policyResult = _policyResultFromGenerated(token.getBody());\n\n      // The policyResult.policy value will be a JSON Web Signature representing\n      // the actual policy object being retrieved. Serialize the token to an\n      // AttestationToken object so we can access the body properties on the token.\n      if (!policyResult.policy) {\n        throw Error(\"Server returned an invalid getPolicy response!\");\n      }\n\n      const policyToken = new AttestationTokenImpl(policyResult.policy);\n\n      const storedPolicy = StoredAttestationPolicy.deserialize(policyToken.getBody());\n\n      // Finally, retrieve the stored attestationPolicy value and return that\n      // as the AttestationResponse to the caller.\n      return createAttestationResponse<string>(\n        token,\n        bytesToString(storedPolicy.attestationPolicy)\n      );\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets the attestation policy for the specified {@link attestationType}.\n   *\n   * @param attestationType - Attestation Type for which to set policy.\n   * @param newPolicyDocument - Policy document to be set.\n   * @param options - call options.\n   * @returns An {@link AttestationResponse} wrapping a {@link PolicyResult}.\n   *  Clients can use the PolicyResult to validate that the policy was actually\n   *  set by the attestation service.\n   *\n   * @remarks\n   *\n   * Please note that if the attestation service instance is running in \"Isolated\"\n   * mode, the {@link signingKey} must be one of the signing keys configured for the\n   * service instance.\n   *\n   * @throws {@link Error} when a private key is specified without a certificate and vice versa.\n   * @throws {@link Error} when the key in the certificate provided does not match the private key.\n   */\n  public async setPolicy(\n    attestationType: AttestationType,\n    newPolicyDocument: string,\n    options: AttestationAdministrationClientPolicyOperationOptions = {}\n  ): Promise<AttestationResponse<PolicyResult>> {\n    const { span, updatedOptions } = createSpan(\n      \"AttestationAdministrationClient-setPolicy\",\n      options\n    );\n    try {\n      if (\n        (!options.privateKey && options.certificate) ||\n        (options.privateKey && !options.certificate)\n      ) {\n        throw new Error(\n          \"If privateKey is specified, certificate must also be provided. If certificate is provided, privateKey must also be provided.\"\n        );\n      }\n\n      if (options.privateKey && options.certificate) {\n        verifyAttestationSigningKey(options.privateKey, options.certificate);\n      }\n\n      const storedAttestationPolicy = new StoredAttestationPolicy(newPolicyDocument).serialize();\n      const setPolicyToken = AttestationTokenImpl.create({\n        body: storedAttestationPolicy,\n        ...options\n      });\n\n      const setPolicyResult = await this._client.policy.set(\n        attestationType,\n        setPolicyToken.serialize(),\n        updatedOptions\n      );\n\n      // The attestation token returned from the service has a PolicyResult\n      // object as the body.\n      const token = new AttestationTokenImpl(setPolicyResult.token);\n      const problems = token.getTokenProblems(\n        await this.signingKeys(),\n        options.validationOptions ?? this._validationOptions\n      );\n      if (problems.length) {\n        throw new Error(problems.join(\";\"));\n      }\n\n      // Deserialize the PolicyResult object to retrieve the underlying policy\n      //  token\n      const policyResult = _policyResultFromGenerated(token.getBody());\n\n      // The policyResult.policy value will be a JSON Web Signature representing\n      // the actual policy object being retrieved. Serialize the token to an\n      // AttestationToken object so we can access the body properties on the token.\n      return createAttestationResponse<PolicyResult>(token, policyResult);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Resets the attestation policy for the specified {@link attestationType} to\n   * the default value.\n   *\n   * @param attestationType - Attestation Type for which to set policy.\n   * @param options - call options.\n   * @returns An {@link AttestationResponse} wrapping a {@link PolicyResult}.\n   *  Clients can use the PolicyResult to validate that the policy was actually\n   *  reset by the attestation service.\n   *\n   * @remarks\n   *\n   * Please note that if the attestation service instance is running in \"Isolated\"\n   * mode, the {@link signingKey} must be one of the signing keys configured for the\n   * service instance.\n   *\n   * @throws {@link Error} when a private key is specified without a certificate and vice versa.\n   * @throws {@link Error} when the key in the certificate provided does not match the private key.\n   */\n\n  public async resetPolicy(\n    attestationType: AttestationType,\n    options: AttestationAdministrationClientPolicyOperationOptions = {}\n  ): Promise<AttestationResponse<PolicyResult>> {\n    const { span, updatedOptions } = createSpan(\n      \"AttestationAdministrationClient-setPolicy\",\n      options\n    );\n    try {\n      if (\n        (!options.privateKey && options.certificate) ||\n        (options.privateKey && !options.certificate)\n      ) {\n        throw new Error(\n          \"If privateKey is specified, certificate must also be provided. If certificate is provided, privateKey must also be provided.\"\n        );\n      }\n\n      if (options.privateKey && options.certificate) {\n        verifyAttestationSigningKey(options.privateKey, options.certificate);\n      }\n\n      const resetPolicyToken = AttestationTokenImpl.create({\n        privateKey: options.privateKey,\n        certificate: options.certificate\n      });\n\n      const resetPolicyResult = await this._client.policy.reset(\n        attestationType,\n        resetPolicyToken.serialize(),\n        updatedOptions\n      );\n\n      // The attestation token returned from the service has a PolicyResult\n      // object as the body.\n      const token = new AttestationTokenImpl(resetPolicyResult.token);\n      const problems = token.getTokenProblems(\n        await this.signingKeys(),\n        options.validationOptions ?? this._validationOptions\n      );\n      if (problems.length) {\n        throw new Error(problems.join(\";\"));\n      }\n\n      // Deserialize the PolicyResult object to retrieve the underlying policy\n      //  token\n      const policyResult = _policyResultFromGenerated(token.getBody());\n\n      // The policyResult.policy value will be a JSON Web Signature representing\n      // the actual policy object being retrieved. Serialize the token to an\n      // AttestationToken object so we can access the body properties on the token.\n      return createAttestationResponse<PolicyResult>(token, policyResult);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /** Returns the set of policy management certificates for this attestation instance.\n   *\n   * @remarks If the attestation instance is not in `Isolated` mode, this list will\n   *    always be empty.\n   *\n   * @param options - Options for the call to the attestation service.\n   * @returns AttestationResponse wrapping a list of Attestation Signers.\n   */\n  public async getPolicyManagementCertificates(\n    options: AttestationAdministrationClientPolicyCertificateOperationOptions = {}\n  ): Promise<AttestationResponse<AttestationSigner[]>> {\n    const { span, updatedOptions } = createSpan(\n      \"AttestationAdministrationClient-getPolicyManagementCertificates\",\n      options\n    );\n    try {\n      const getCertificatesResult = await this._client.policyCertificates.get(updatedOptions);\n      // The attestation token returned from the service has a PolicyResult\n      // object as the body.\n      const token = new AttestationTokenImpl(getCertificatesResult.token);\n      const problems = token.getTokenProblems(\n        await this.signingKeys(),\n        options.validationOptions ?? this._validationOptions\n      );\n      if (problems.length) {\n        throw new Error(problems.join(\";\"));\n      }\n\n      // Deserialize the PolicyResult object to retrieve the underlying policy\n      //  token\n      const jwks = TypeDeserializer.deserialize(\n        token.getBody(),\n        {\n          PolicyCertificatesResult: Mappers.PolicyCertificatesResult,\n          JsonWebKeySet: Mappers.JsonWebKeySet,\n          JsonWebKey: Mappers.JsonWebKey\n        },\n        \"PolicyCertificatesResult\"\n      ) as PolicyCertificatesResult;\n\n      const policyCertificates = new Array<AttestationSigner>();\n      jwks.policyCertificates.keys.forEach((jwk) => {\n        policyCertificates.push(_attestationSignerFromGenerated(jwk));\n      });\n\n      return createAttestationResponse<AttestationSigner[]>(token, policyCertificates);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /** Add a new certificate chain to the set of policy management certificates.\n   *\n   * @param pemCertificate - PEM encoded certificate to add to the set of policy management certificates.\n   * @param privateKey - Existing attestation private key used to sign the incoming request.\n   * @param certificate - Existing attestation certificate used to verify the incoming request.\n   * @param options - Options used in the call to the service.\n   * @returns An attestation response including a PolicyCertificatesModificationResult\n   *\n   * @remarks This API is only supported on `isolated` attestation instances.\n   *\n   * The signing key MUST be one of the existing attestation signing certificates. The\n   * new pemCertificate is signed using the signingKey and the service will validate the\n   * signature before allowing the addition.\n   *\n   * @throws {@link Error} when a private key is specified without a certificate and vice versa.\n   * @throws {@link Error} when the key in the certificate provided does not match the private key.\n   *\n   */\n  public async addPolicyManagementCertificate(\n    pemCertificate: string,\n    privateKey: string,\n    certificate: string,\n    options: AttestationAdministrationClientPolicyCertificateOperationOptions = {}\n  ): Promise<AttestationResponse<PolicyCertificatesModificationResult>> {\n    const { span, updatedOptions } = createSpan(\n      \"AttestationAdministrationClient-addPolicyManagementCertificate\",\n      options\n    );\n    try {\n      if ((!privateKey && certificate) || (privateKey && !certificate)) {\n        throw new Error(\n          \"If privateKey is specified, certificate must also be provided. If certificate is provided, privateKey must also be provided.\"\n        );\n      }\n\n      if (privateKey && certificate) {\n        verifyAttestationSigningKey(privateKey, certificate);\n      }\n\n      const cert = new jsrsasign.X509();\n      cert.readCertPEM(pemCertificate);\n      const kty = this.keyTypeFromCertificate(cert);\n\n      const jwk: JsonWebKey = {\n        x5C: [hexToBase64(cert.hex)],\n        kty: kty\n      };\n\n      const addBody: AttestationCertificateManagementBody = {\n        policyCertificate: jwk\n      };\n\n      const addCertToken = AttestationTokenImpl.create({\n        body: TypeDeserializer.serialize(\n          addBody,\n          {\n            AttestationCertificateManagementBody: Mappers.AttestationCertificateManagementBody,\n            JsonWebKey: Mappers.JsonWebKey\n          },\n          Mappers.AttestationCertificateManagementBody\n        ),\n        privateKey: privateKey,\n        certificate: certificate\n      });\n\n      const addCertificateResult = await this._client.policyCertificates.add(\n        addCertToken.serialize(),\n        updatedOptions\n      );\n      // The attestation token returned from the service has a PolicyResult\n      // object as the body.\n      const token = new AttestationTokenImpl(addCertificateResult.token);\n      const problems = token.getTokenProblems(\n        await this.signingKeys(),\n        options.validationOptions ?? this._validationOptions\n      );\n      if (problems.length) {\n        throw new Error(problems.join(\";\"));\n      }\n\n      // Deserialize the PolicyCertificatesModificationResult object.\n      const result = TypeDeserializer.deserialize(\n        token.getBody(),\n        {\n          PolicyCertificatesModificationResult: Mappers.PolicyCertificatesModificationResult,\n          JsonWebKeySet: Mappers.JsonWebKeySet,\n          JsonWebKey: Mappers.JsonWebKey\n        },\n        \"PolicyCertificatesModificationResult\"\n      ) as PolicyCertificatesModificationResult;\n\n      return createAttestationResponse<PolicyCertificatesModificationResult>(token, result);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private keyTypeFromCertificate(cert: any): string {\n    let kty: string;\n    switch (cert.getSignatureAlgorithmName()) {\n      case \"SHA256withRSA\":\n      case \"SHA384withRSA\":\n      case \"SHA512withRSA\":\n        kty = \"RSA\";\n        break;\n      case \"SHA256withECDSA\":\n      case \"SHA384withECDSA\":\n        kty = \"EC\";\n        break;\n      default:\n        kty = \"RSA\";\n        break;\n    }\n    return kty;\n  }\n\n  /** Add a new certificate chain to the set of policy management certificates.\n   *\n   * @param pemCertificate - PEM encoded certificate to add to the set of policy management certificates.\n   * @param privateKey - Existing attestation private key used to sign the incoming request.\n   * @param certificate - Existing attestation certificate used to verify the incoming request.\n   * @param options - Options used in the call to the service.\n   * @returns An attestation response including a PolicyCertificatesModificationResult\n   *\n   * @remarks This API is only supported on `isolated` attestation instances.\n   *\n   * The signing key MUST be one of the existing attestation signing certificates. The\n   * new pemCertificate is signed using the signingKey and the service will validate the\n   * signature before allowing the addition.\n   *\n   * @throws {@link Error} when a private key is specified without a certificate and vice versa.\n   * @throws {@link Error} when the key in the certificate provided does not match the private key.\n   */\n  public async removePolicyManagementCertificate(\n    pemCertificate: string,\n    privateKey: string,\n    certificate: string,\n    options: AttestationAdministrationClientPolicyCertificateOperationOptions = {}\n  ): Promise<AttestationResponse<PolicyCertificatesModificationResult>> {\n    const { span, updatedOptions } = createSpan(\n      \"AttestationAdministrationClient-removePolicyManagementCertificate\",\n      options\n    );\n    try {\n      if ((!privateKey && certificate) || (privateKey && !certificate)) {\n        throw new Error(\n          \"If privateKey is specified, certificate must also be provided. If certificate is provided, privateKey must also be provided.\"\n        );\n      }\n\n      if (privateKey && certificate) {\n        verifyAttestationSigningKey(privateKey, certificate);\n      }\n\n      const cert = new jsrsasign.X509();\n      cert.readCertPEM(pemCertificate);\n      const kty = this.keyTypeFromCertificate(cert);\n\n      const jwk: JsonWebKey = {\n        x5C: [hexToBase64(cert.hex)],\n        kty: kty\n      };\n\n      const addBody: AttestationCertificateManagementBody = {\n        policyCertificate: jwk\n      };\n\n      const removeCertToken = AttestationTokenImpl.create({\n        body: TypeDeserializer.serialize(\n          addBody,\n          {\n            AttestationCertificateManagementBody: Mappers.AttestationCertificateManagementBody,\n            JsonWebKey: Mappers.JsonWebKey\n          },\n          Mappers.AttestationCertificateManagementBody\n        ),\n        privateKey: privateKey,\n        certificate: certificate\n      });\n\n      const removeCertificateResult = await this._client.policyCertificates.remove(\n        removeCertToken.serialize(),\n        updatedOptions\n      );\n      // The attestation token returned from the service has a PolicyResult\n      // object as the body.\n      const token = new AttestationTokenImpl(removeCertificateResult.token);\n      const problems = token.getTokenProblems(\n        await this.signingKeys(),\n        options.validationOptions ?? this._validationOptions\n      );\n      if (problems.length) {\n        throw new Error(problems.join(\";\"));\n      }\n\n      // Deserialize the PolicyCertificatesModificationResult object.\n      const result = TypeDeserializer.deserialize(\n        token.getBody(),\n        {\n          PolicyCertificatesModificationResult: Mappers.PolicyCertificatesModificationResult,\n          JsonWebKeySet: Mappers.JsonWebKeySet,\n          JsonWebKey: Mappers.JsonWebKey\n        },\n        \"PolicyCertificatesModificationResult\"\n      ) as PolicyCertificatesModificationResult;\n\n      return createAttestationResponse<PolicyCertificatesModificationResult>(token, result);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async signingKeys(): Promise<AttestationSigner[]> {\n    if (this._signers !== undefined) {\n      return this._signers;\n    }\n    const jwks = await this._client.signingCertificates.get();\n    const signers: AttestationSigner[] = new Array();\n    jwks.keys?.forEach((element) => {\n      signers.push(_attestationSignerFromGenerated(element));\n    });\n    this._signers = signers;\n    return this._signers;\n  }\n\n  private _client: GeneratedClient;\n  private _signers?: AttestationSigner[];\n  private _validationOptions?: AttestationTokenValidationOptions;\n}\n"],"names":["KnownAttestationType","KnownCertificateModification","KnownPolicyModification","createSerializer","StoredAttestationPolicy","Mappers.StoredAttestationPolicy","jsrsasign.X509","jsrsasign.KJUR","Mappers.JsonWebKey","jsrsasign.RSAKey","AttestOpenEnclaveRequestMapper","AttestSgxEnclaveRequestMapper","TpmAttestationRequestMapper","coreClient.createSerializer","Mappers.PolicyResponse","Mappers.CloudError","Parameters.apiVersion","Parameters.instanceUrl","Parameters.attestationType","Parameters.accept","Parameters.newAttestationPolicy","Parameters.contentType","Parameters.accept1","Parameters.policyJws","getOperationSpec","serializer","Mappers.PolicyCertificatesResponse","Mappers.PolicyCertificatesModifyResponse","Parameters.policyCertificateToAdd","Parameters.contentType1","Parameters.policyCertificateToRemove","Mappers.AttestationResponse","Parameters.request","Parameters.request1","Mappers.TpmAttestationResponse","Parameters.request2","Mappers.JsonWebKeySet","Parameters.accept2","coreClient.ServiceClient","createClientLogger","createSpanFunction","isTokenCredential","Mappers.GeneratedAttestationResult","SpanStatusCode","Mappers.PolicyResult","Mappers.PolicyCertificatesResult","Mappers.AttestationCertificateManagementBody","Mappers.PolicyCertificatesModificationResult"],"mappings":"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"}