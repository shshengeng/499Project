{"version":3,"file":"attestationClient.js","sourceRoot":"","sources":["../../src/attestationClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { GeneratedClient } from \"./generated/generatedClient\";\n\nimport { AttestationSigner, AttestationTokenValidationOptions, AttestationResult } from \"./models\";\n\nimport {\n  GeneratedAttestationResult,\n  InitTimeData,\n  KnownDataType,\n  RuntimeData\n} from \"./generated/models\";\n\nimport { logger } from \"./logger\";\nimport { createSpan } from \"./tracing\";\nimport { GeneratedClientOptionalParams } from \"./generated/models\";\nimport * as Mappers from \"./generated/models/mappers\";\n\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { AttestationResponse, createAttestationResponse } from \"./models/attestationResponse\";\n\nimport { TypeDeserializer } from \"./utils/typeDeserializer\";\nimport { isTokenCredential, TokenCredential } from \"@azure/core-auth\";\nimport { CommonClientOptions, OperationOptions } from \"@azure/core-client\";\nimport { bytesToString, stringToBytes } from \"./utils/utf8\";\nimport { _attestationResultFromGenerated } from \"./models/attestationResult\";\nimport { _attestationSignerFromGenerated } from \"./models/attestationSigner\";\nimport { AttestationTokenImpl } from \"./models/attestationToken\";\nimport { Uint8ArrayFromInput } from \"./utils/buffer\";\n/**\n * Attestation Client Construction Options.\n */\nexport interface AttestationClientOptions extends CommonClientOptions {\n  /**\n   * Validation options to be used to validate attestation tokens received\n   * from the attestation service.\n   */\n  validationOptions?: AttestationTokenValidationOptions;\n}\n\n/**\n * Operation options for the Attestation Client operations.\n */\nexport interface AttestationClientOperationOptions extends OperationOptions {\n  /**\n   * Validation options to be used to validate attestation tokens received\n   * from the attestation service for the individual operation.\n   */\n  validationOptions?: AttestationTokenValidationOptions;\n}\n\n/**\n * Optional parameters for the AttestOpenEnclave API.\n *\n * @param initTimeData - data provided at the time the enclave was initialized.\n * @param runTimeData - data provided at the time the SGX quote being attested was created.\n * @param draftPolicyForAttestation - If specified, the attestation policy to be used during the attestation request.\n */\nexport interface AttestOpenEnclaveOptions extends AttestationClientOperationOptions {\n  /**\n   *initTimeData : data provided at the time the enclave was initialized, to be interpreted as binary data.\n   *\n   */\n  initTimeData?: Uint8Array | Buffer | Blob;\n\n  /**\n   * inittimeJson : data provided at the time the enclave was initialized, to be interpreted as JSON data.\n   */\n  initTimeJson?: Uint8Array | Buffer | Blob;\n\n  /**\n   * runTimeData  - data provided at the time the OpenEnclave report being attested was created to be interpreted as binary data.\n   */\n  runTimeData?: Uint8Array | Buffer | Blob;\n\n  /**\n   * runTimeJson  - data provided at the time the OpenEnclave report being attested was created to be interpreted as JSON data.\n   */\n  runTimeJson?: Uint8Array | Buffer | Blob;\n\n  /**\n   * draftPolicyForAttestation - If specified, the attestation policy to be used during the attestation request.\n   */\n  draftPolicyForAttestation?: string;\n}\n\n/**\n * Optional parameters for the AttestSgxEnclave API.\n *\n * @param initTimeData - data provided at the time the enclave was initialized.\n * @param runTimeData - data provided at the time the SGX quote being attested was created.\n * @param draftPolicyForAttestation - If specified, the attestation policy to be used during the attestation request.\n */\nexport interface AttestSgxEnclaveOptions extends AttestationClientOperationOptions {\n  /**\n   *initTimeData : data provided at the time the enclave was initialized, to be interpreted as binary data.\n   *\n   */\n  initTimeData?: Uint8Array | Buffer | Blob;\n\n  /**\n   * inittimeJson : data provided at the time the enclave was initialized, to be interpreted as JSON data.\n   */\n  initTimeJson?: Uint8Array | Buffer | Blob;\n\n  /**\n   * runTimeData  - data provided at the time the OpenEnclave report being attested was created to be interpreted as binary data.\n   */\n  runTimeData?: Uint8Array | Buffer | Blob;\n\n  /**\n   * runTimeJson  - data provided at the time the OpenEnclave report being attested was created to be interpreted as JSON data.\n   */\n  runTimeJson?: Uint8Array | Buffer | Blob;\n\n  /**\n   * draftPolicyForAttestation - If specified, the attestation policy to be used during the attestation request.\n   */\n  draftPolicyForAttestation?: string;\n}\n\n/**\n * Operation options for the AttestTpm API.\n */\nexport interface AttestTpmOptions extends AttestationClientOperationOptions {}\n\n/**\n * Attestation Client class.\n *\n * The AttestationClient class enables access to the Attestation related APIs:\n *\n * - getOpenIdMetadata\n * - getAttestationSigners\n * - attestSgxEnclave\n * - attestOpenEnclave\n * - attestTpm\n */\nexport class AttestationClient {\n  /**\n   * Creates an instance of AttestationClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { AttestationClient } from \"@azure/attestation\";\n   *\n   * const client = new AttestationClient(\n   *    \"<service endpoint>\"\n   * );\n   * ```\n   *\n   * @param endpoint - The attestation instance base URI, for example https://mytenant.attest.azure.net.\n   * @param options - Options used to configure the Attestation Client.\n   *\n   */\n  public constructor(endpoint: string, options?: AttestationClientOptions);\n\n  /**\n   * Creates an instance of AttestationClient with options and credentials.\n   *\n   * Example usage:\n   * ```ts\n   * import { AttestationClient } from \"@azure/attestation\";\n   *\n   * const client = new AttestationClient(\n   *    \"<service endpoint>\",\n   *    new TokenCredential(\"<>\"),\n   *    { tokenValidationOptions: { validateToken: false } }\n   * );\n   * ```\n   *\n   * Note that credentials are required to call the `attestTpm` API.\n   *\n   * @param endpoint - The attestation instance base URI, for example https://mytenant.attest.azure.net.\n   * @param credentials - Credentials used to configure the attestation client.\n   *\n   */\n  public constructor(\n    endpoint: string,\n    credentials: TokenCredential,\n    options?: AttestationClientOptions\n  );\n  public constructor(\n    endpoint: string,\n    credentialsOrOptions?: TokenCredential | AttestationClientOptions,\n    clientOptions: AttestationClientOptions = {}\n  ) {\n    let credentialScopes: string[] | undefined = undefined;\n    let credential: TokenCredential | undefined = undefined;\n    let options: AttestationClientOptions = {};\n\n    // If arg2 is defined, it's either a tokenCredential or it's a client options.\n    if (credentialsOrOptions !== undefined) {\n      if (isTokenCredential(credentialsOrOptions)) {\n        credential = credentialsOrOptions;\n        credentialScopes = [\"https://attest.azure.net/.default\"];\n      } else {\n        options = credentialsOrOptions;\n      }\n    } else if (clientOptions !== undefined) {\n      options = clientOptions;\n    }\n\n    const internalPipelineOptions: GeneratedClientOptionalParams = {\n      ...options,\n      ...{\n        credentialScopes: credentialScopes,\n        credential: credential,\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: [\"x-ms-request-id\", \"x-ms-maa-service-version\"]\n        }\n      }\n    };\n\n    this._client = new GeneratedClient(endpoint, internalPipelineOptions);\n    this._validationOptions = options.validationOptions;\n  }\n\n  /** Attests an OpenEnclave report generated from an SGX Enclave using the OpenEnclave SDK.\n   *\n   * @param report - An OpenEnclave report generated by an SGX enclave.\n   * @param options - Operation options for the attestOpenEnclave API call.\n   * @returns Returns an AttestationResponse whose body is an AttestationResult describing\n   *    the claims returned by the attestation service.\n   *\n   * @throws {@link Error} if the `initTimeData` option and `initTimeJson` option is provided.\n   * @throws {@link Error} if the `runTimeData` option and `runTimeJson` option is provided.\n   * @throws {@link Error} if the `initTimeJson` option is provided and the value of `initTimeJson` is not JSON.\n   * @throws {@link Error} if the `runTimeJson` option is provided and the value of `runTimeJson` is not JSON.\n   */\n  public async attestOpenEnclave(\n    report: Uint8Array | Buffer | Blob,\n    options: AttestOpenEnclaveOptions = {}\n  ): Promise<AttestationResponse<AttestationResult>> {\n    const { span, updatedOptions } = createSpan(\"AttestationClient-attestOpenEnclave\", options);\n\n    try {\n      if (options.initTimeData !== undefined && options.initTimeJson !== undefined) {\n        throw new Error(\"Cannot provide both initTimeData and initTimeJson.\");\n      }\n\n      if (options.runTimeData !== undefined && options.runTimeJson !== undefined) {\n        throw new Error(\"Cannot provide both runTimeData and runTimeJson.\");\n      }\n\n      const initData = await Uint8ArrayFromInput(options.initTimeData ?? options.initTimeJson);\n\n      const initTimeData: InitTimeData | undefined = initData\n        ? {\n            data: initData,\n            dataType: options.initTimeJson !== undefined ? KnownDataType.Json : KnownDataType.Binary\n          }\n        : undefined;\n\n      const runData = await Uint8ArrayFromInput(options.runTimeData ?? options.runTimeJson);\n\n      const runTimeData: RuntimeData | undefined = runData\n        ? {\n            data: runData,\n            dataType: options.runTimeJson !== undefined ? KnownDataType.Json : KnownDataType.Binary\n          }\n        : undefined;\n\n      const attestationResponse = await this._client.attestation.attestOpenEnclave(\n        {\n          report: await Uint8ArrayFromInput(report),\n          initTimeData: initTimeData,\n          runtimeData: runTimeData,\n          draftPolicyForAttestation: options.draftPolicyForAttestation ?? undefined\n        },\n        updatedOptions\n      );\n\n      const token = new AttestationTokenImpl(attestationResponse.token);\n      const problems = token.getTokenProblems(\n        await this._signingKeys(),\n        options.validationOptions ?? this._validationOptions\n      );\n      if (problems.length) {\n        throw new Error(problems.join(\";\"));\n      }\n\n      const attestationResult = TypeDeserializer.deserialize(\n        token.getBody(),\n        {\n          GeneratedAttestationResult: Mappers.GeneratedAttestationResult,\n          JsonWebKey: Mappers.JsonWebKey\n        },\n        \"GeneratedAttestationResult\"\n      ) as GeneratedAttestationResult;\n\n      return createAttestationResponse<AttestationResult>(\n        token,\n        _attestationResultFromGenerated(attestationResult)\n      );\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /** Attests a quote generated from SGX Enclave using the Intel SDK.\n   *\n   * @param quote - An SGX quote generated by an SGX enclave.\n   * @param options - Operation options for the attestOpenEnclave API call.\n   * @returns Returns an AttestationResponse whose body is an AttestationResult describing\n   *    the claims returned by the attestation service.\n   * @throws {@link Error} if the `initTimeData` option and `initTimeJson` option is provided.\n   * @throws {@link Error} if the `runTimeData` option and `runTimeJson` option is provided.\n   */\n  public async attestSgxEnclave(\n    quote: Uint8Array | Buffer | Blob,\n    options: AttestSgxEnclaveOptions = {}\n  ): Promise<AttestationResponse<AttestationResult>> {\n    const { span, updatedOptions } = createSpan(\"AttestationClient-attestSgxEnclave\", options);\n    try {\n      if (options.initTimeData !== undefined && options.initTimeJson !== undefined) {\n        throw new Error(\"Cannot provide both initTimeData and initTimeJson.\");\n      }\n\n      if (options.runTimeData !== undefined && options.runTimeJson !== undefined) {\n        throw new Error(\"Cannot provide both runTimeData and runTimeJson.\");\n      }\n\n      const initData = await Uint8ArrayFromInput(options.initTimeData ?? options.initTimeJson);\n\n      const initTimeData: InitTimeData | undefined = initData\n        ? {\n            data: initData,\n            dataType: options.initTimeJson !== undefined ? KnownDataType.Json : KnownDataType.Binary\n          }\n        : undefined;\n\n      const runData = await Uint8ArrayFromInput(options.runTimeData ?? options.runTimeJson);\n      const runTimeData: RuntimeData | undefined = runData\n        ? {\n            data: runData,\n            dataType: options.runTimeJson !== undefined ? KnownDataType.Json : KnownDataType.Binary\n          }\n        : undefined;\n\n      const attestationResponse = await this._client.attestation.attestSgxEnclave(\n        {\n          quote: await Uint8ArrayFromInput(quote),\n          initTimeData: initTimeData,\n          runtimeData: runTimeData,\n          draftPolicyForAttestation: options.draftPolicyForAttestation ?? undefined\n        },\n        updatedOptions\n      );\n\n      const token = new AttestationTokenImpl(attestationResponse.token);\n      const problems = token.getTokenProblems(\n        await this._signingKeys(),\n        options.validationOptions ?? this._validationOptions\n      );\n      if (problems.length) {\n        throw new Error(problems.join(\";\"));\n      }\n\n      const attestationResult = TypeDeserializer.deserialize(\n        token.getBody(),\n        {\n          GeneratedAttestationResult: Mappers.GeneratedAttestationResult,\n          JsonWebKey: Mappers.JsonWebKey\n        },\n        \"GeneratedAttestationResult\"\n      ) as GeneratedAttestationResult;\n\n      return createAttestationResponse<AttestationResult>(\n        token,\n        _attestationResultFromGenerated(attestationResult)\n      );\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /** Attest a TPM based enclave.\n\n   * See the  {@link https://docs.microsoft.com/en-us/azure/attestation/virtualization-based-security-protocol | TPM Attestation Protocol Reference} for more information.\n   * \n   * @param request - Incoming request to send to the TPM attestation service, Utf8 encoded.\n   * @param options - Pipeline options for TPM attestation request.\n   * @returns A structure containing the response from the TPM attestation, Utf8 encoded.\n   * \n   * @remarks\n   * \n   * The incoming requests to the TPM attestation API are stringified JSON objects.\n   * \n   * @example\n   * For example, the initial call for a TPM attestation operation is:\n   * \n   * ```js\n   * const encodedPayload = JSON.stringify({ payload: { type: \"aikcert\" } });\n   * const result = await client.attestTpm(encodedPayload);\n   * ```\n   * \n   * where stringToBytes converts the string to UTF8.\n   * \n   * Note that the attestTpm requires an attestation client which is configured with\n   * authentication credentials.\n   * \n   */\n  public async attestTpm(request: string, options: AttestTpmOptions = {}): Promise<string> {\n    const { span, updatedOptions } = createSpan(\"AttestationClient-attestSgxEnclave\", options);\n    try {\n      const response = await this._client.attestation.attestTpm(\n        { data: stringToBytes(request) },\n        updatedOptions\n      );\n      if (response.data) {\n        return bytesToString(response.data);\n      } else {\n        throw Error(\"Internal error - response data cannot be undefined.\");\n      }\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns the list of attestation signers which can be used to sign attestation\n   * service tokens.\n   *\n   * @param options - Client operation options.\n   * @returns the set of AttestationSigners which may be used to sign attestation tokens.\n   */\n  public async getAttestationSigners(\n    options: AttestationClientOperationOptions = {}\n  ): Promise<AttestationSigner[]> {\n    const { span, updatedOptions } = createSpan(\"AttestationClient-getAttestationSigners\", options);\n    try {\n      const signingCertificates = await this._client.signingCertificates.get(updatedOptions);\n      const signers: AttestationSigner[] = new Array();\n      signingCertificates.keys?.forEach((element) => {\n        signers.push(_attestationSignerFromGenerated(element));\n      });\n      return signers;\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns the OpenID Metadata discovery document for the attestation service instance.\n   * @param options - Client operation options.\n   * @returns The OpenID metadata discovery document for the attestation service.\n   */\n  public async getOpenIdMetadata(\n    options: AttestationClientOperationOptions = {}\n  ): Promise<Record<string, unknown>> {\n    const { span, updatedOptions } = createSpan(\"AttestationClient-getOpenIdMetadata\", options);\n    try {\n      const configs = await this._client.metadataConfiguration.get(updatedOptions);\n      return configs;\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private _client: GeneratedClient;\n  private _validationOptions?: AttestationTokenValidationOptions;\n  private _signers?: AttestationSigner[];\n\n  private async _signingKeys(): Promise<AttestationSigner[]> {\n    if (this._signers !== undefined) {\n      return this._signers;\n    }\n    const jwks = await this._client.signingCertificates.get();\n    const signers: AttestationSigner[] = new Array();\n    jwks.keys?.forEach((element) => {\n      signers.push(_attestationSignerFromGenerated(element));\n    });\n    this._signers = signers;\n    return this._signers;\n  }\n}\n"]}