// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// TextDecoder and TextEncoder are in the global namespace for Node version 11 and
// higher, but before that, they were in the "util" namespace. If we're running
// under node ("Buffer" is defined), then check to see if the global namespace version
// of the decoders are present, if not, import them from the util namespace.
const decoder = typeof Buffer === "undefined"
    ? // eslint-disable-next-line @typescript-eslint/no-require-imports
        new (TextDecoder !== null && TextDecoder !== void 0 ? TextDecoder : require("util").TextDecoder)("ascii")
    : undefined;
const encoder = typeof Buffer === "undefined"
    ? // eslint-disable-next-line @typescript-eslint/no-require-imports
        new (TextEncoder !== null && TextEncoder !== void 0 ? TextEncoder : require("util").TextEncoder)("ascii")
    : undefined;
const decode = decoder
    ? (buffer) => decoder.decode(buffer)
    : (buffer) => buffer.toString("ascii");
const encode = encoder
    ? (str) => encoder.encode(str)
    : (str) => Buffer.from(str, "utf8");
/**
 * Converts a string into a utf8 encoded byte array.
 * @param content - The utf8 string to convert.
 * @internal
 */
export function stringToBytes(content) {
    return encode(content);
}
/**
 * Converts a utf8 string into a byte array.
 * @param content - The utf8 string to convert.
 * @internal
 */
export function bytesToString(content) {
    return decode(content);
}
//# sourceMappingURL=utf8.js.map