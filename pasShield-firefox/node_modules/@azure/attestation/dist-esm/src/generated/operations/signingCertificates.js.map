{"version":3,"file":"signingCertificates.js","sourceRoot":"","sources":["../../../../src/generated/operations/signingCertificates.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AACjD,OAAO,KAAK,OAAO,MAAM,mBAAmB,CAAC;AAC7C,OAAO,KAAK,UAAU,MAAM,sBAAsB,CAAC;AAOnD,gDAAgD;AAChD,MAAM,OAAO,uBAAuB;IAGlC;;;OAGG;IACH,YAAY,MAA8B;QACxC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,GAAG,CACD,OAA8C;QAE9C,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAE,OAAO,EAAE,EAAE,gBAAgB,CAAC,CAAC;IACzE,CAAC;CACF;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,gBAAgB,GAA6B;IACjD,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,aAAa;SAClC;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B;KACF;IACD,aAAa,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACvC,gBAAgB,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC;IACtC,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { SigningCertificates } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClientContext } from \"../generatedClientContext\";\nimport {\n  SigningCertificatesGetOptionalParams,\n  SigningCertificatesGetResponse\n} from \"../models\";\n\n/** Class representing a SigningCertificates. */\nexport class SigningCertificatesImpl implements SigningCertificates {\n  private readonly client: GeneratedClientContext;\n\n  /**\n   * Initialize a new instance of the class SigningCertificates class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves metadata signing certificates in use by the attestation service\n   * @param options The options parameters.\n   */\n  get(\n    options?: SigningCertificatesGetOptionalParams\n  ): Promise<SigningCertificatesGetResponse> {\n    return this.client.sendOperationRequest({ options }, getOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/certs\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.JsonWebKeySet\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\n"]}