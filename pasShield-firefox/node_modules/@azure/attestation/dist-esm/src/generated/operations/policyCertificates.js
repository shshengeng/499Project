/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class representing a PolicyCertificates. */
export class PolicyCertificatesImpl {
    /**
     * Initialize a new instance of the class PolicyCertificates class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieves the set of certificates used to express policy for the current tenant.
     * @param options The options parameters.
     */
    get(options) {
        return this.client.sendOperationRequest({ options }, getOperationSpec);
    }
    /**
     * Adds a new attestation policy certificate to the set of policy management certificates.
     * @param policyCertificateToAdd An RFC7519 JSON Web Token whose body is an RFC7517 JSON Web Key
     *                               object. The RFC7519 JWT must be signed with one of the existing signing certificates
     * @param options The options parameters.
     */
    add(policyCertificateToAdd, options) {
        return this.client.sendOperationRequest({ policyCertificateToAdd, options }, addOperationSpec);
    }
    /**
     * Removes the specified policy management certificate. Note that the final policy management
     * certificate cannot be removed.
     * @param policyCertificateToRemove An RFC7519 JSON Web Token whose body is an
     *                                  AttestationCertificateManagementBody object. The RFC7519 JWT must be signed with one of the existing
     *                                  signing certificates
     * @param options The options parameters.
     */
    remove(policyCertificateToRemove, options) {
        return this.client.sendOperationRequest({ policyCertificateToRemove, options }, removeOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/certificates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyCertificatesResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.instanceUrl],
    headerParameters: [Parameters.accept],
    serializer
};
const addOperationSpec = {
    path: "/certificates:add",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyCertificatesModifyResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.policyCertificateToAdd,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.instanceUrl],
    headerParameters: [Parameters.accept, Parameters.contentType1],
    mediaType: "json",
    serializer
};
const removeOperationSpec = {
    path: "/certificates:remove",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyCertificatesModifyResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.policyCertificateToRemove,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.instanceUrl],
    headerParameters: [Parameters.accept, Parameters.contentType1],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=policyCertificates.js.map