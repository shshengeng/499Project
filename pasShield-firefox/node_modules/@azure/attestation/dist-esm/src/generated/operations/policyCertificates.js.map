{"version":3,"file":"policyCertificates.js","sourceRoot":"","sources":["../../../../src/generated/operations/policyCertificates.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AACjD,OAAO,KAAK,OAAO,MAAM,mBAAmB,CAAC;AAC7C,OAAO,KAAK,UAAU,MAAM,sBAAsB,CAAC;AAWnD,+CAA+C;AAC/C,MAAM,OAAO,sBAAsB;IAGjC;;;OAGG;IACH,YAAY,MAA8B;QACxC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,GAAG,CACD,OAA6C;QAE7C,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAE,OAAO,EAAE,EAAE,gBAAgB,CAAC,CAAC;IACzE,CAAC;IAED;;;;;OAKG;IACH,GAAG,CACD,sBAA8B,EAC9B,OAA6C;QAE7C,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,sBAAsB,EAAE,OAAO,EAAE,EACnC,gBAAgB,CACjB,CAAC;IACJ,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CACJ,yBAAiC,EACjC,OAAgD;QAEhD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,yBAAyB,EAAE,OAAO,EAAE,EACtC,mBAAmB,CACpB,CAAC;IACJ,CAAC;CACF;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,gBAAgB,GAA6B;IACjD,IAAI,EAAE,eAAe;IACrB,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,0BAA0B;SAC/C;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACvC,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,gBAAgB,GAA6B;IACjD,IAAI,EAAE,mBAAmB;IACzB,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,gCAAgC;SACrD;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B;KACF;IACD,WAAW,EAAE,UAAU,CAAC,sBAAsB;IAC9C,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACvC,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,YAAY,CAAC;IAC9D,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,mBAAmB,GAA6B;IACpD,IAAI,EAAE,sBAAsB;IAC5B,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,gCAAgC;SACrD;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B;KACF;IACD,WAAW,EAAE,UAAU,CAAC,yBAAyB;IACjD,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACvC,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,YAAY,CAAC;IAC9D,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PolicyCertificates } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClientContext } from \"../generatedClientContext\";\nimport {\n  PolicyCertificatesGetOptionalParams,\n  PolicyCertificatesGetResponse,\n  PolicyCertificatesAddOptionalParams,\n  PolicyCertificatesAddResponse,\n  PolicyCertificatesRemoveOptionalParams,\n  PolicyCertificatesRemoveResponse\n} from \"../models\";\n\n/** Class representing a PolicyCertificates. */\nexport class PolicyCertificatesImpl implements PolicyCertificates {\n  private readonly client: GeneratedClientContext;\n\n  /**\n   * Initialize a new instance of the class PolicyCertificates class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the set of certificates used to express policy for the current tenant.\n   * @param options The options parameters.\n   */\n  get(\n    options?: PolicyCertificatesGetOptionalParams\n  ): Promise<PolicyCertificatesGetResponse> {\n    return this.client.sendOperationRequest({ options }, getOperationSpec);\n  }\n\n  /**\n   * Adds a new attestation policy certificate to the set of policy management certificates.\n   * @param policyCertificateToAdd An RFC7519 JSON Web Token whose body is an RFC7517 JSON Web Key\n   *                               object. The RFC7519 JWT must be signed with one of the existing signing certificates\n   * @param options The options parameters.\n   */\n  add(\n    policyCertificateToAdd: string,\n    options?: PolicyCertificatesAddOptionalParams\n  ): Promise<PolicyCertificatesAddResponse> {\n    return this.client.sendOperationRequest(\n      { policyCertificateToAdd, options },\n      addOperationSpec\n    );\n  }\n\n  /**\n   * Removes the specified policy management certificate. Note that the final policy management\n   * certificate cannot be removed.\n   * @param policyCertificateToRemove An RFC7519 JSON Web Token whose body is an\n   *                                  AttestationCertificateManagementBody object. The RFC7519 JWT must be signed with one of the existing\n   *                                  signing certificates\n   * @param options The options parameters.\n   */\n  remove(\n    policyCertificateToRemove: string,\n    options?: PolicyCertificatesRemoveOptionalParams\n  ): Promise<PolicyCertificatesRemoveResponse> {\n    return this.client.sendOperationRequest(\n      { policyCertificateToRemove, options },\n      removeOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/certificates\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyCertificatesResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst addOperationSpec: coreClient.OperationSpec = {\n  path: \"/certificates:add\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyCertificatesModifyResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.policyCertificateToAdd,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst removeOperationSpec: coreClient.OperationSpec = {\n  path: \"/certificates:remove\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyCertificatesModifyResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.policyCertificateToRemove,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\n"]}