/// <reference types="node" />
import { CommonClientOptions } from '@azure/core-client';
import { OperationOptions } from '@azure/core-client';
import { TokenCredential } from '@azure/core-auth';

/**
 * Attestation Client class.
 *
 * The AttestationClient class enables access to the Attestation related APIs:
 *
 * - getPolicy
 * - setPolicy
 * - resetPolicy
 * - getPolicyManagementCertificates
 * - addPolicyManagementCertificate
 * - removePolicyManagementCertificate
 */
export declare class AttestationAdministrationClient {
    /**
     * Creates an instance of AttestationAdministrationClient.
     *
     * Example usage:
     * ```ts
     * import { AttestationAdministrationClient } from "@azure/attestation";
     *
     * const client = new AttestationAdministrationClient(
     *    "<service endpoint>",
     *    new TokenCredential("<>")
     * );
     * ```
     *
     * @param endpoint - The attestation instance endpoint, for example https://mytenant.attest.azure.net.
     * @param credential - Used to authenticate requests to the service.
     * @param options - Used to configure the Form Recognizer client.
     */
    constructor(endpoint: string, credentials: TokenCredential, options?: AttestationAdministrationClientOptions);
    /**
     * Retrieves the attestation policy document from the server, and returns it
     * to the caller.
     *
     * @param attestationType - AttestationType for which to retrieve policy.
     * @param options - Pipeline and client options for the `getPolicy` call.
     * @returns `AttestationResponse<string>` - the `value` property is the
     *      attestation policy,  the `token` property will be the actual token
     *      returned by the attestation service.
     */
    getPolicy(attestationType: AttestationType, options?: AttestationAdministrationClientPolicyOperationOptions): Promise<AttestationResponse<string>>;
    /**
     * Sets the attestation policy for the specified {@link attestationType}.
     *
     * @param attestationType - Attestation Type for which to set policy.
     * @param newPolicyDocument - Policy document to be set.
     * @param options - call options.
     * @returns An {@link AttestationResponse} wrapping a {@link PolicyResult}.
     *  Clients can use the PolicyResult to validate that the policy was actually
     *  set by the attestation service.
     *
     * @remarks
     *
     * Please note that if the attestation service instance is running in "Isolated"
     * mode, the {@link signingKey} must be one of the signing keys configured for the
     * service instance.
     *
     * @throws {@link Error} when a private key is specified without a certificate and vice versa.
     * @throws {@link Error} when the key in the certificate provided does not match the private key.
     */
    setPolicy(attestationType: AttestationType, newPolicyDocument: string, options?: AttestationAdministrationClientPolicyOperationOptions): Promise<AttestationResponse<PolicyResult>>;
    /**
     * Resets the attestation policy for the specified {@link attestationType} to
     * the default value.
     *
     * @param attestationType - Attestation Type for which to set policy.
     * @param options - call options.
     * @returns An {@link AttestationResponse} wrapping a {@link PolicyResult}.
     *  Clients can use the PolicyResult to validate that the policy was actually
     *  reset by the attestation service.
     *
     * @remarks
     *
     * Please note that if the attestation service instance is running in "Isolated"
     * mode, the {@link signingKey} must be one of the signing keys configured for the
     * service instance.
     *
     * @throws {@link Error} when a private key is specified without a certificate and vice versa.
     * @throws {@link Error} when the key in the certificate provided does not match the private key.
     */
    resetPolicy(attestationType: AttestationType, options?: AttestationAdministrationClientPolicyOperationOptions): Promise<AttestationResponse<PolicyResult>>;
    /** Returns the set of policy management certificates for this attestation instance.
     *
     * @remarks If the attestation instance is not in `Isolated` mode, this list will
     *    always be empty.
     *
     * @param options - Options for the call to the attestation service.
     * @returns AttestationResponse wrapping a list of Attestation Signers.
     */
    getPolicyManagementCertificates(options?: AttestationAdministrationClientPolicyCertificateOperationOptions): Promise<AttestationResponse<AttestationSigner[]>>;
    /** Add a new certificate chain to the set of policy management certificates.
     *
     * @param pemCertificate - PEM encoded certificate to add to the set of policy management certificates.
     * @param privateKey - Existing attestation private key used to sign the incoming request.
     * @param certificate - Existing attestation certificate used to verify the incoming request.
     * @param options - Options used in the call to the service.
     * @returns An attestation response including a PolicyCertificatesModificationResult
     *
     * @remarks This API is only supported on `isolated` attestation instances.
     *
     * The signing key MUST be one of the existing attestation signing certificates. The
     * new pemCertificate is signed using the signingKey and the service will validate the
     * signature before allowing the addition.
     *
     * @throws {@link Error} when a private key is specified without a certificate and vice versa.
     * @throws {@link Error} when the key in the certificate provided does not match the private key.
     *
     */
    addPolicyManagementCertificate(pemCertificate: string, privateKey: string, certificate: string, options?: AttestationAdministrationClientPolicyCertificateOperationOptions): Promise<AttestationResponse<PolicyCertificatesModificationResult>>;
    private keyTypeFromCertificate;
    /** Add a new certificate chain to the set of policy management certificates.
     *
     * @param pemCertificate - PEM encoded certificate to add to the set of policy management certificates.
     * @param privateKey - Existing attestation private key used to sign the incoming request.
     * @param certificate - Existing attestation certificate used to verify the incoming request.
     * @param options - Options used in the call to the service.
     * @returns An attestation response including a PolicyCertificatesModificationResult
     *
     * @remarks This API is only supported on `isolated` attestation instances.
     *
     * The signing key MUST be one of the existing attestation signing certificates. The
     * new pemCertificate is signed using the signingKey and the service will validate the
     * signature before allowing the addition.
     *
     * @throws {@link Error} when a private key is specified without a certificate and vice versa.
     * @throws {@link Error} when the key in the certificate provided does not match the private key.
     */
    removePolicyManagementCertificate(pemCertificate: string, privateKey: string, certificate: string, options?: AttestationAdministrationClientPolicyCertificateOperationOptions): Promise<AttestationResponse<PolicyCertificatesModificationResult>>;
    private signingKeys;
    private _client;
    private _signers?;
    private _validationOptions?;
}

/**
 * Operation options for the Attestation Administration Client operations.
 */
export declare interface AttestationAdministrationClientOperationOptions extends OperationOptions {
    /**
     * Options to be used globally to validate attestation tokens received from
     * the attestation service.
     */
    validationOptions?: AttestationTokenValidationOptions;
}

/**
 * Attestation Client Construction Options.
 */
export declare interface AttestationAdministrationClientOptions extends CommonClientOptions {
    /**
     * Options to be used globally to validate attestation tokens received from
     * the attestation service.
     */
    validationOptions?: AttestationTokenValidationOptions;
}

/**
 * Operation options for the Policy Certificates operations.
 */
export declare interface AttestationAdministrationClientPolicyCertificateOperationOptions extends AttestationAdministrationClientOperationOptions {
}

/**
 * Operation options for the administration Policy operations.
 */
export declare interface AttestationAdministrationClientPolicyOperationOptions extends AttestationAdministrationClientOperationOptions {
    /**
     * Optional Private key used to sign the token sent to the attestation service.
     *
     * Required for Isolated Mode attestation instances.
     */
    privateKey?: string;
    /**
     * Optional certificate which can validate the token sent to the attestation service.
     *
     * Required for Isolated Mode attestation instances.
     *
     * If the service instance is in Isolated mode, the certificate *must* be one
     * of the configured policy management certificates.
     */
    certificate?: string;
}

/**
 * Attestation Client class.
 *
 * The AttestationClient class enables access to the Attestation related APIs:
 *
 * - getOpenIdMetadata
 * - getAttestationSigners
 * - attestSgxEnclave
 * - attestOpenEnclave
 * - attestTpm
 */
export declare class AttestationClient {
    /**
     * Creates an instance of AttestationClient.
     *
     * Example usage:
     * ```ts
     * import { AttestationClient } from "@azure/attestation";
     *
     * const client = new AttestationClient(
     *    "<service endpoint>"
     * );
     * ```
     *
     * @param endpoint - The attestation instance base URI, for example https://mytenant.attest.azure.net.
     * @param options - Options used to configure the Attestation Client.
     *
     */
    constructor(endpoint: string, options?: AttestationClientOptions);
    /**
     * Creates an instance of AttestationClient with options and credentials.
     *
     * Example usage:
     * ```ts
     * import { AttestationClient } from "@azure/attestation";
     *
     * const client = new AttestationClient(
     *    "<service endpoint>",
     *    new TokenCredential("<>"),
     *    { tokenValidationOptions: { validateToken: false } }
     * );
     * ```
     *
     * Note that credentials are required to call the `attestTpm` API.
     *
     * @param endpoint - The attestation instance base URI, for example https://mytenant.attest.azure.net.
     * @param credentials - Credentials used to configure the attestation client.
     *
     */
    constructor(endpoint: string, credentials: TokenCredential, options?: AttestationClientOptions);
    /** Attests an OpenEnclave report generated from an SGX Enclave using the OpenEnclave SDK.
     *
     * @param report - An OpenEnclave report generated by an SGX enclave.
     * @param options - Operation options for the attestOpenEnclave API call.
     * @returns Returns an AttestationResponse whose body is an AttestationResult describing
     *    the claims returned by the attestation service.
     *
     * @throws {@link Error} if the `initTimeData` option and `initTimeJson` option is provided.
     * @throws {@link Error} if the `runTimeData` option and `runTimeJson` option is provided.
     * @throws {@link Error} if the `initTimeJson` option is provided and the value of `initTimeJson` is not JSON.
     * @throws {@link Error} if the `runTimeJson` option is provided and the value of `runTimeJson` is not JSON.
     */
    attestOpenEnclave(report: Uint8Array | Buffer | Blob, options?: AttestOpenEnclaveOptions): Promise<AttestationResponse<AttestationResult>>;
    /** Attests a quote generated from SGX Enclave using the Intel SDK.
     *
     * @param quote - An SGX quote generated by an SGX enclave.
     * @param options - Operation options for the attestOpenEnclave API call.
     * @returns Returns an AttestationResponse whose body is an AttestationResult describing
     *    the claims returned by the attestation service.
     * @throws {@link Error} if the `initTimeData` option and `initTimeJson` option is provided.
     * @throws {@link Error} if the `runTimeData` option and `runTimeJson` option is provided.
     */
    attestSgxEnclave(quote: Uint8Array | Buffer | Blob, options?: AttestSgxEnclaveOptions): Promise<AttestationResponse<AttestationResult>>;
    /** Attest a TPM based enclave.
  
     * See the  {@link https://docs.microsoft.com/en-us/azure/attestation/virtualization-based-security-protocol | TPM Attestation Protocol Reference} for more information.
     *
     * @param request - Incoming request to send to the TPM attestation service, Utf8 encoded.
     * @param options - Pipeline options for TPM attestation request.
     * @returns A structure containing the response from the TPM attestation, Utf8 encoded.
     *
     * @remarks
     *
     * The incoming requests to the TPM attestation API are stringified JSON objects.
     *
     * @example
     * For example, the initial call for a TPM attestation operation is:
     *
     * ```js
     * const encodedPayload = JSON.stringify({ payload: { type: "aikcert" } });
     * const result = await client.attestTpm(encodedPayload);
     * ```
     *
     * where stringToBytes converts the string to UTF8.
     *
     * Note that the attestTpm requires an attestation client which is configured with
     * authentication credentials.
     *
     */
    attestTpm(request: string, options?: AttestTpmOptions): Promise<string>;
    /**
     * Returns the list of attestation signers which can be used to sign attestation
     * service tokens.
     *
     * @param options - Client operation options.
     * @returns the set of AttestationSigners which may be used to sign attestation tokens.
     */
    getAttestationSigners(options?: AttestationClientOperationOptions): Promise<AttestationSigner[]>;
    /**
     * Returns the OpenID Metadata discovery document for the attestation service instance.
     * @param options - Client operation options.
     * @returns The OpenID metadata discovery document for the attestation service.
     */
    getOpenIdMetadata(options?: AttestationClientOperationOptions): Promise<Record<string, unknown>>;
    private _client;
    private _validationOptions?;
    private _signers?;
    private _signingKeys;
}

/**
 * Operation options for the Attestation Client operations.
 */
export declare interface AttestationClientOperationOptions extends OperationOptions {
    /**
     * Validation options to be used to validate attestation tokens received
     * from the attestation service for the individual operation.
     */
    validationOptions?: AttestationTokenValidationOptions;
}

/**
 * Attestation Client Construction Options.
 */
export declare interface AttestationClientOptions extends CommonClientOptions {
    /**
     * Validation options to be used to validate attestation tokens received
     * from the attestation service.
     */
    validationOptions?: AttestationTokenValidationOptions;
}

/**
 *
 * An AttestationPolicyToken represents an AttestationToken which holds an attestation
 * policy document.
 *
 * When the attestation service receives a set policy request, the payload of the
 * set policy token contains a {@link https://datatracker.ietf.org/doc/html/rfc7515 | JSON Web Signature}
 * whose body contains the actual attestation policy document.
 *
 * The AttestationPolicyToken represents this JWS object.
 */
export declare interface AttestationPolicyToken extends AttestationToken {
}

/**
 * An AttestationResponse represents the response from the Microsoft Azure
 * Attestation service. It has two properties:
 *
 * @param token - The attestation token returned from the attestation service.
 * @param body - The value of the response from the attestation service.
 * @typeparam T - The type of the {@link body} property.
 *
 */
export declare interface AttestationResponse<T> {
    /**
     * The Attestation Token returned from the attestation service.
     */
    token: AttestationToken;
    /**
     * The value of the response from the attestation service, derived
     *  from the body of the {@link token} property.
     */
    body: T;
}

/**
 * A Microsoft Azure Attestation response token body - the body of a response token issued by MAA
 */
export declare interface AttestationResult {
    /**
     * Unique Identifier for the token.
     *
     * Corresponds to the 'jti' claim defined in
     * {@link https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7 | RFC 7519 section 4.1.7}
     */
    uniqueId: string;
    /**
     * Returns the issuer of the attestation token. MUST be the same as the
     * endpoint used when constructing the attestation client instance.
     */
    issuer: string;
    /**
     * Returns the "nonce" value if one was specified in the Attest request.
     */
    nonce?: string;
    /**
     * The Schema version of this structure. Current Value: 1.0
     */
    version: string;
    /**
     *  Returns the runtime claims in the token.
     *
     * This value will match the input `runTimeJson` property to the
     * {@link AttestationClient.attestSgxEnclave} or
     * {@link AttestationClient.attestOpenEnclave} API.
     *
     * @remarks
     *
     * The `runtimeClaims` property will only be populated if the
     * `runtimeJson` parameter to the `Attest` API is specified. It will
     * not be populated if the `runtimeData` parameter is specified.
     */
    runTimeClaims: unknown;
    /**
     * Returns the initialization time claims in the token.
     * This value will match the input `initTimeJson` property to the
     * {@link AttestationClient.attestSgxEnclave} or
     * {@link AttestationClient.attestOpenEnclave} API.
     *
     * @remarks
     *
     *  The `initTimeClaims` property will only be populated if the `initTimeJson`
     *  parameter to the `Attest` API is specified. It will not be populated if
     *  the `initTimeData` parameter is specified.
     */
    initTimeClaims: unknown;
    /**
     * Returns the set of claims generated by the attestation policy on the instance.
     */
    policyClaims: unknown;
    /**
     * Returns the verifier which generated this attestation token. Normally one of:
     * "SGX" or "TPM", but others can be specified.
     */
    verifierType: string;
    /**
     * The certificate used to sign the policy object, if specified.
     */
    policySigner?: AttestationSigner;
    /**
     * The base64url encoded SHA256 hash of the BASE64URL encoded policy text
     * used for attestation.
     */
    policyHash: Uint8Array;
    /**
     * True if the enclave is debuggable, false otherwise. Only valid if `verifierType` is SGX.
     */
    isDebuggable?: boolean;
    /**
     * The SGX Product ID for the enclave. Only valid if the `verifierType` field is "SGX"
     */
    productId?: number;
    /**
     * The HEX encoded SGX MRENCLAVE value for the enclave. Only valid if the
     * `verifierType` field is "SGX"
     */
    mrEnclave?: string;
    /**
     * The HEX encoded SGX MRSIGNER value for the enclave. Only valid if the
     * `verifierType` field is "SGX"
     */
    mrSigner?: string;
    /**
     * The SGX SVN value for the enclave. Only valid if the `verifierType` field is "SGX"
     */
    svn?: number;
    /**
     * Returns the value of the runtime_data field specified as an input to the
     * {@link AttestationClient.attestSgxEnclave} or {@link AttestationClient.attestOpenEnclave} API.
     *
     * @remarks
     *
     * The `enclaveHeldData` property will only be populated if the
     * `runtimeData` parameter to the `Attest` API is specified.
     */
    enclaveHeldData?: Uint8Array;
    /**
     * Returns a set of information describing the complete set of inputs to the
     * Attestation validation logic.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    sgxCollateral?: AttestationSgxCollateralInfo;
}

/**
 * Defines the contents of the {@link AttestationResult.sgxCollateral} claim in
 * an {@link AttestationResult}.
 */
export declare interface AttestationSgxCollateralInfo {
    /**
     * Hex encoded Sha256 hash of the Quoting Enclave Certificates.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    qeidcertshash?: string;
    /**
     * Hex encoded Sha256 hash of the Quoting Enclave Certificate CRL.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    qeidcrlhash?: string;
    /**
     * Hex encoded Sha256 hash of the Quoting Enclave Identity.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    qeidhash?: string;
    /**
     * Hex encoded Sha256 hash of the SGX Quote or OpenEnclave Report validated
     * by this token.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    quotehash?: string;
    /**
     * Hex encoded Sha256 hash of the TCB Info Certificates.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    tcbinfocertshash?: string;
    /**
     * Hex encoded Sha256 hash of the TCB Info Certificate CRL.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    tcbinfocrlhash?: string;
    /**
     * Hex encoded Sha256 hash of the TCB Info for the device being attested.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    tcbinfohash?: string;
}

/**
 * An AttestationSigner represents a signing certificate chain/Key ID combination
 * returned by the attestation service.
 */
export declare interface AttestationSigner {
    /**
     * The Key ID for the signer, as defined by the "kid" parameter in
     * {@link https://datatracker.ietf.org/doc/html/rfc7517#section-4.5 | RFC 7517 section 4.5}
     */
    keyId?: string;
    /**
     * An array of X.509 certificates DER encoded and PEM encoded one of which
     * will be used to sign an attestation token. Also the "x5c" parameter in
     * {@link https://datatracker.ietf.org/doc/html/rfc7517#section-4.7 | RFC 7517 section 4.7}
     */
    certificates: string[];
}

/**
 *
 * An AttestationToken represents an RFC 7515 JSON Web Signature object.
 *
 * It can represent either the token returned by the attestation service,
 * or it can be used to create a token locally which can be used to verify
 * attestation policy changes.
 */
export declare interface AttestationToken {
    /**
     * Returns the deserialized body of the AttestationToken object.
     *
     * @returns The body of the attestation token as an object.
     */
    getBody(): unknown;
    /**
     * the token to a string.
     *
     * @remarks
     * Serializes the token to a string.
     *
     * @returns The token serialized to a RFC 7515 JSON Web Signature.
     */
    serialize(): string;
    /**
     * Validates the attestation token to verify that it is semantically correct.
     *
     * @param possibleSigners - the set of possible signers for this attestation token.
     * @param options - validation options
     */
    getTokenProblems(possibleSigners?: AttestationSigner[], options?: AttestationTokenValidationOptions): string[];
    /** ********* JSON WEB SIGNATURE (RFC 7515) PROPERTIES */
    /**
     * Returns the algorithm from the header of the JSON Web Signature.
     *
     *  See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.1 | RFC 7515 Section 4.1.1})
     *  for details.
     *
     * If the value of algorithm is "none" it indicates that the token is unsecured.
     */
    algorithm: string;
    /**
     *  Json Web Signature Header "kid".
     *   See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.4 | RFC 7515 Section 4.1.4})
     *   for details.
     */
    keyId?: string;
    /**
     * Json Web Signature Header "crit".
     *
     *   See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.11 | RFC 7515 Section 4.1.11})
     *   for details.
     *
     */
    critical?: boolean;
    /**
     * Json Web Token Header "content type".
     * See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.10 | RFC 7515 Section 4.1.10})
     *
     */
    contentType?: string;
    /**
     * Json Web Token Header "key URL".
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.2 | RFC 7515 Section 4.1.2})
     *
     */
    keyUrl?: string;
    /**
     * Json Web Token Header "X509 Url".
     * @see {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.5 | RFC 7515 Section 4.1.5})
     *
     */
    x509Url?: string;
    /** Json Web Token Header "Typ".
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.9 | RFC 7515 Section 4.1.9})
     *
     */
    type?: string;
    /**
     * Json Web Token Header "x509 thumprint".
     * See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.7 | RFC 7515 Section 4.1.7})
     */
    certificateThumbprint?: string;
    /** Json Web Token Header "x509 SHA256 thumprint".
     *
     * See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.8 | RFC 7515 Section 4.1.8})
     *
     */
    certificateSha256Thumbprint?: string;
    /** Json Web Token Header "x509 certificate chain".
     *
     * See {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.6 | RFC 7515 Section 4.1.6})
     *
     */
    certificateChain?: AttestationSigner;
    /** ********* JSON WEB TOKEN (RFC 7519) PROPERTIES */
    /** Issuer of the attestation token.
     * See {@link https://www.rfc-editor.org/rfc/rfc7519.html#section-4.1.6 | RFC 7519 Section 4.1.6})
     *   for details.
     */
    issuer?: string;
    /** Expiration time for the token, from JWT body.
     *
     * See {@link https://www.rfc-editor.org/rfc/rfc7519.html#section-4.1.4 | RFC 7519 Section 4.1.4})
     *   for details.
     */
    expiresOn?: Date;
    /** Issuance time for the token, from JWT body.
     *
     * See {@link https://www.rfc-editor.org/rfc/rfc7519.html#section-4.1.6 | RFC 7519 Section 4.1.6})
     *   for details.
     */
    issuedAt?: Date;
    /**
     * Not Before time for the token, from JWT body.
     *
     * See {@link https://www.rfc-editor.org/rfc/rfc7519.html#section-4.1.5 | RFC 7519 Section 4.1.5})
     *   for details.
     */
    notBefore?: Date;
}

/**
 * Options used to validate attestation tokens.
 *
 * @typeparam issuer - if provided, specifies the expected issuer of the attestation token.
 * @typeparam validateExpirationTime - if true, validate the expiration time in the token.
 * @typeparam validateNotBeforeTime - if true, validate the "not before" time in the token.
 * @typeparam validateToken - if true, validate the token.
 * @typeparam timeValidationSlack - the validation time slack in the time based validations.
 *
 * @remarks
 *
 *  If validateToken, validateNotBeforeTime, or validateExpirationTime are not
 *  provided, they are all assumed to be 'true'.
 *
 */
export declare interface AttestationTokenValidationOptions {
    /**
     * If true, validate the attestation token, if false, skip validation.
     */
    validateToken?: boolean;
    /**
     * If true, validate the expiration time for the token.
     */
    validateExpirationTime?: boolean;
    /**
     * If true, validate the "not before" time for the token.
     */
    validateNotBeforeTime?: boolean;
    /**
     * If true, validate the issuer of the token.
     */
    validateIssuer?: boolean;
    /**
     * The expected issuer for the {@link AttestationToken}. Only checked if {@link validateIssuer} is set.
     */
    expectedIssuer?: string;
    /**
     * Tolerance time (in seconds) used to accound for clock drift between the local machine
     * and the server creating the token.
     */
    timeValidationSlack?: number;
    /**
     * Validation function which allows developers to provide their own validation
     * functionality for the attestation token. This can be used to perform additional
     * validations for  signing certificate in AttestationSigner.
     *
     * @param token - Attestation Token to validate.
     * @param signer - Signing Certificate which validated the token.
     *
     * @remarks
     *
     * If there is a problem with token validation, the validateAttestationCallback function
     * will return an array of strings indicating the set of problems found in the token.
     *
     * @returns an array of problems in the token, or undefined if there are no problems.
     */
    validateAttestationToken?: (token: AttestationToken, signer?: AttestationSigner) => string[] | undefined;
}

/**
 * Defines values for AttestationType. \
 * {@link KnownAttestationType} can be used interchangeably with AttestationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SgxEnclave**: Intel Software Guard eXtensions \
 * **OpenEnclave**: OpenEnclave extensions to SGX \
 * **Tpm**: Edge TPM Virtualization Based Security
 */
export declare type AttestationType = string;

/**
 * Optional parameters for the AttestOpenEnclave API.
 *
 * @param initTimeData - data provided at the time the enclave was initialized.
 * @param runTimeData - data provided at the time the SGX quote being attested was created.
 * @param draftPolicyForAttestation - If specified, the attestation policy to be used during the attestation request.
 */
export declare interface AttestOpenEnclaveOptions extends AttestationClientOperationOptions {
    /**
     *initTimeData : data provided at the time the enclave was initialized, to be interpreted as binary data.
     *
     */
    initTimeData?: Uint8Array | Buffer | Blob;
    /**
     * inittimeJson : data provided at the time the enclave was initialized, to be interpreted as JSON data.
     */
    initTimeJson?: Uint8Array | Buffer | Blob;
    /**
     * runTimeData  - data provided at the time the OpenEnclave report being attested was created to be interpreted as binary data.
     */
    runTimeData?: Uint8Array | Buffer | Blob;
    /**
     * runTimeJson  - data provided at the time the OpenEnclave report being attested was created to be interpreted as JSON data.
     */
    runTimeJson?: Uint8Array | Buffer | Blob;
    /**
     * draftPolicyForAttestation - If specified, the attestation policy to be used during the attestation request.
     */
    draftPolicyForAttestation?: string;
}

/**
 * Optional parameters for the AttestSgxEnclave API.
 *
 * @param initTimeData - data provided at the time the enclave was initialized.
 * @param runTimeData - data provided at the time the SGX quote being attested was created.
 * @param draftPolicyForAttestation - If specified, the attestation policy to be used during the attestation request.
 */
export declare interface AttestSgxEnclaveOptions extends AttestationClientOperationOptions {
    /**
     *initTimeData : data provided at the time the enclave was initialized, to be interpreted as binary data.
     *
     */
    initTimeData?: Uint8Array | Buffer | Blob;
    /**
     * inittimeJson : data provided at the time the enclave was initialized, to be interpreted as JSON data.
     */
    initTimeJson?: Uint8Array | Buffer | Blob;
    /**
     * runTimeData  - data provided at the time the OpenEnclave report being attested was created to be interpreted as binary data.
     */
    runTimeData?: Uint8Array | Buffer | Blob;
    /**
     * runTimeJson  - data provided at the time the OpenEnclave report being attested was created to be interpreted as JSON data.
     */
    runTimeJson?: Uint8Array | Buffer | Blob;
    /**
     * draftPolicyForAttestation - If specified, the attestation policy to be used during the attestation request.
     */
    draftPolicyForAttestation?: string;
}

/**
 * Operation options for the AttestTpm API.
 */
export declare interface AttestTpmOptions extends AttestationClientOperationOptions {
}

/**
 * Defines values for CertificateModification. \
 * {@link KnownCertificateModification} can be used interchangeably with CertificateModification,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IsPresent**: After the operation was performed, the certificate is in the set of certificates. \
 * **IsAbsent**: After the operation was performed, the certificate is no longer present in the set of certificates.
 */
export declare type CertificateModification = string;

/** Constructs an AttestationToken containing an Attestation Policy document.
 *
 * @param policy - Attestation policy to embed in the attestation token.
 * @param privateKey - optional private key used to sign the attestation token.
 * @param certificate - optional certificate used to verify the attestation token.
 *
 * @remarks Note that if the attestation instance is running in `Isolated` mode,
 *  the privateKey and certificate are required. If the attestation instance
 *  is running in `AAD` mode, they are optional.
 *
 * @throws {@link Error} when the key in the certificate provided does not match the private key.
 */
export declare function createAttestationPolicyToken(policy: string, privateKey?: string, certificate?: string): AttestationPolicyToken;

/** Known values of {@link AttestationType} that the service accepts. */
export declare enum KnownAttestationType {
    /** Intel Software Guard eXtensions */
    SgxEnclave = "SgxEnclave",
    /** OpenEnclave extensions to SGX */
    OpenEnclave = "OpenEnclave",
    /** Edge TPM Virtualization Based Security */
    Tpm = "Tpm"
}

/** Known values of {@link CertificateModification} that the service accepts. */
export declare enum KnownCertificateModification {
    /** After the operation was performed, the certificate is in the set of certificates. */
    IsPresent = "IsPresent",
    /** After the operation was performed, the certificate is no longer present in the set of certificates. */
    IsAbsent = "IsAbsent"
}

/** Known values of {@link PolicyModification} that the service accepts. */
export declare enum KnownPolicyModification {
    /** The specified policy object was updated. */
    Updated = "Updated",
    /** The specified policy object was removed. */
    Removed = "Removed"
}

/** The result of a policy certificate modification */
export declare interface PolicyCertificatesModificationResult {
    /** Hex encoded SHA1 Hash of the binary representation certificate which was added or removed */
    certificateThumbprint: string;
    /** The result of the operation */
    certificateResolution: CertificateModification;
}

/**
 * Defines values for PolicyModification. \
 * {@link KnownPolicyModification} can be used interchangeably with PolicyModification,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Updated**: The specified policy object was updated. \
 * **Removed**: The specified policy object was removed.
 */
export declare type PolicyModification = string;

/**
 * The result of a policy certificate modification
 */
export declare interface PolicyResult {
    /**
     * The result of the operation
     */
    policyResolution: PolicyModification;
    /**
     * The SHA256 hash of the policy object modified
     */
    policyTokenHash: Uint8Array;
    /**
     * The certificate used to sign the policy object, if specified
     */
    policySigner?: AttestationSigner;
    /**
     * A JSON Web Token containing a StoredAttestationPolicy object with the attestation policy
     */
    policy?: string;
}

export { }
